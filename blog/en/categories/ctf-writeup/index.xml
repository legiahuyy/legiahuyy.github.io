<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CTF Writeup on Yet, another infosec blog</title>
    <link>https://legiahuyy.github.io/blog/en/categories/ctf-writeup/</link>
    <description>Recent content in CTF Writeup on Yet, another infosec blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 29 Apr 2022 09:30:00 +1345</lastBuildDate><atom:link href="https://legiahuyy.github.io/blog/en/categories/ctf-writeup/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>KCSC CTF 2022: secret [RE]</title>
      <link>https://legiahuyy.github.io/blog/en/posts/kcsc-ctf-2022-re-secret/</link>
      <pubDate>Fri, 29 Apr 2022 09:30:00 +1345</pubDate>
      
      <guid>https://legiahuyy.github.io/blog/en/posts/kcsc-ctf-2022-re-secret/</guid>
      <description>&lt;p&gt;This post is a write-up for the challenge &amp;ldquo;secret&amp;rdquo; from KCSC-CTF 2022 which I just participated on Sunday, last week. The challenge seems to be a mixed of miscellaneous and reverse expertise as it requires us to analyze both a network PCAP file and an executable in order to obtain the flag.&lt;/p&gt;</description>
      <content>&lt;p&gt;This post is a write-up for the challenge &amp;ldquo;secret&amp;rdquo; from KCSC-CTF 2022 which I just participated on Sunday, last week. The challenge seems to be a mixed of miscellaneous and reverse expertise as it requires us to analyze both a network PCAP file and an executable in order to obtain the flag.&lt;/p&gt;
&lt;p&gt;You can download the challenge &lt;a href=&#34;https://github.com/legiahuyy/dropper/blob/main/kcsc-ctf-2022/re/secret.zip&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;footprinting&#34;&gt;Footprinting&lt;/h2&gt;
&lt;p&gt;The target&amp;rsquo;s directory contains two following files, &lt;code&gt;capture.pcapng&lt;/code&gt; and &lt;code&gt;secret.exe&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;D:/Development/github/repos/image-host/2022-04-30-kcscctf2022-secret/2022-04-30_20-29.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;secretexe&#34;&gt;secret.exe&lt;/h3&gt;
&lt;p&gt;Fortunately, the result provided from ExeinfoPE shows that the binary file is not packed and, presumably, obfuscated by any third-parties. Yet, keep in mind that almost every reversing challenge usually has its own implementation of code obfuscation or data encryption, which we need to solve later.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;D:/Development/github/repos/image-host/2022-04-30-kcscctf2022-secret/2022-04-30_20-39.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Based on the result, we can tell there is also no hidden executable in the original one so it is not necessary to scan and dump &lt;code&gt;secret.exe&lt;/code&gt;&amp;rsquo;s resource.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;D:/Development/github/repos/image-host/2022-04-30-kcscctf2022-secret/2022-04-30_20-54.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;capturepcapng&#34;&gt;capture.pcapng&lt;/h3&gt;
&lt;p&gt;The pcapng file has no unusual characteristics or properties, it shows us the conversation between &lt;code&gt;192.168.123.111&lt;/code&gt; and &lt;code&gt;192.168.123.123&lt;/code&gt; and based on the context, the host with the fourth octet &lt;code&gt;111&lt;/code&gt; is sending assumingly encrypted data to the other one.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;D:/Development/github/repos/image-host/2022-04-30-kcscctf2022-secret/2022-04-30_21-02.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;reversing&#34;&gt;Reversing&lt;/h2&gt;
&lt;p&gt;Examine the binary with IDA, pseudo code of its &lt;code&gt;main&lt;/code&gt; function as follows:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;D:/Development/github/repos/image-host/2022-04-30-kcscctf2022-secret/2022-04-30_21-53.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;As demonstrated, this is apparently an initialization for a WinSock connection using those familiar API calls like &lt;code&gt;WSAStartup&lt;/code&gt;, &lt;code&gt;htons&lt;/code&gt;, &lt;code&gt;inet_addr&lt;/code&gt;, &amp;hellip; straight from the book.&lt;/p&gt;
&lt;p&gt;The function does:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Create a singleton mutex object with default namespace as &lt;code&gt;9_5_diem&lt;/code&gt;, not that important&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Initialize &lt;code&gt;sockaddr_in&lt;/code&gt; struct as:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;sockaddr_in.sin_family &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// AF_INET
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;sockaddr_in.sin_addr.s_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; inet_addr(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;192.168.123.123&amp;#34;&lt;/span&gt;)
sockaddr_in.sin_port &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; htons(&lt;span style=&#34;color:#ae81ff&#34;&gt;1337&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// 0x593
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and then call &lt;code&gt;socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)&lt;/code&gt; with address family specification as IPv4, socket type as byte stream and protocol as TCP, respectively&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Establish the connection using &lt;code&gt;connect&lt;/code&gt; with the aforementioned struct as parameter&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Call &lt;code&gt;sub_401983&lt;/code&gt; and release the mutex then finally exit.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Nothing much of an interest until we jump into &lt;code&gt;sub_401983&lt;/code&gt; which actually does something less mundane:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;D:/Development/github/repos/image-host/2022-04-30-kcscctf2022-secret/2022-04-30_22-34.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;In detail, &lt;code&gt;sub_401983&lt;/code&gt; does:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Create two sections of shared memory (called &lt;strong&gt;pipes&lt;/strong&gt;) that it would later use for communication, and &lt;code&gt;SetHandleInformation&lt;/code&gt; is to ensure the memory regions is not inherited.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Initialize &lt;code&gt;ProcessInformation&lt;/code&gt; and &lt;code&gt;StartupInfo&lt;/code&gt; to redirect STDIN and STDOUT to the above regions&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Call &lt;code&gt;cmd.exe&lt;/code&gt; via &lt;code&gt;CreateProcessW&lt;/code&gt; then execute &lt;code&gt;StartAddress&lt;/code&gt; and &lt;code&gt;sub_4018B3&lt;/code&gt; simultaneously&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;cmd.exe&lt;/code&gt; should receive inputs from the pipes, execute them and redirect its STDOUT/STDERR to the pipes&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Wait indefinitely (&lt;code&gt;WaitForSingleObject&lt;/code&gt;) for &lt;code&gt;cmd.exe&lt;/code&gt; to exit and return&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In simple term, the function basically creates anonymous &lt;em&gt;pipes&lt;/em&gt; for both STDIN and STDOUT, it then calls &lt;code&gt;cmd.exe&lt;/code&gt; and creates a thread pool consists of &lt;code&gt;StartAddress&lt;/code&gt; and &lt;code&gt;sub_4018B3&lt;/code&gt;, waits for them and exits eventually.&lt;/p&gt;
&lt;p&gt;Next, we would want to have a look at &lt;code&gt;StartAddress&lt;/code&gt;&amp;rsquo;s pseudo C:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__stdcall&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;StartAddress&lt;/span&gt;()
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;v0; &lt;span style=&#34;color:#75715e&#34;&gt;// ebx
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  size_t v1; &lt;span style=&#34;color:#75715e&#34;&gt;// ebx
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  size_t v2; &lt;span style=&#34;color:#75715e&#34;&gt;// esi
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  _DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;v3; &lt;span style=&#34;color:#75715e&#34;&gt;// edi
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;v4; &lt;span style=&#34;color:#75715e&#34;&gt;// ST0C_4
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; result; &lt;span style=&#34;color:#75715e&#34;&gt;// eax
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;buf; &lt;span style=&#34;color:#75715e&#34;&gt;// [esp+10h] [ebp-60h]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;i; &lt;span style=&#34;color:#75715e&#34;&gt;// [esp+14h] [ebp-5Ch]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; v8; &lt;span style=&#34;color:#75715e&#34;&gt;// [esp+18h] [ebp-58h]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v9; &lt;span style=&#34;color:#75715e&#34;&gt;// [esp+1Ch] [ebp-54h]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v10; &lt;span style=&#34;color:#75715e&#34;&gt;// [esp+20h] [ebp-50h]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v11; &lt;span style=&#34;color:#75715e&#34;&gt;// [esp+24h] [ebp-4Ch]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v12; &lt;span style=&#34;color:#75715e&#34;&gt;// [esp+28h] [ebp-48h]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v13; &lt;span style=&#34;color:#75715e&#34;&gt;// [esp+2Ch] [ebp-44h]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v14; &lt;span style=&#34;color:#75715e&#34;&gt;// [esp+30h] [ebp-40h]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v15; &lt;span style=&#34;color:#75715e&#34;&gt;// [esp+34h] [ebp-3Ch]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  size_t v16; &lt;span style=&#34;color:#75715e&#34;&gt;// [esp+38h] [ebp-38h]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;v17; &lt;span style=&#34;color:#75715e&#34;&gt;// [esp+3Ch] [ebp-34h]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; v18; &lt;span style=&#34;color:#75715e&#34;&gt;// [esp+40h] [ebp-30h]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  DWORD NumberOfBytesRead; &lt;span style=&#34;color:#75715e&#34;&gt;// [esp+68h] [ebp-8h]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
  v0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)sub_401BC5(&lt;span style=&#34;color:#ae81ff&#34;&gt;0xFFFF&lt;/span&gt;);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ( i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v0; ; v0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i )
  {
    memset(v0, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFFFFu&lt;/span&gt;);
    result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ReadFile(hObject, v0, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFFFFu&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;NumberOfBytesRead, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(_BYTE)result &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;NumberOfBytesRead )
      &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
    qmemcpy(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v8, (&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)sub_4014F5(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v18), &lt;span style=&#34;color:#ae81ff&#34;&gt;0x28u&lt;/span&gt;);
    v1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v16;
    v2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v16 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;;
    buf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)sub_401BC5(v16 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;);
    memset(buf, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, v2);
    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)buf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v8;
    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;((_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)buf &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v1;
    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;((_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)buf &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v9;
    v3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; buf &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;;
    v4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v17;
    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;v3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v10;
    v3[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v11;
    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;((_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)buf &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v12;
    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;((_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)buf &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v13;
    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;((_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)buf &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v14;
    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;((_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)buf &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v15;
    memmove(buf &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;, v4, v1);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( send(s, buf, v1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; )
      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; closesocket(s);
    sub_401BC0(buf);
    Sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;0xAu&lt;/span&gt;);
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; result;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It is roughly equivalent to:&lt;/p&gt;</content>
    </item>
    
  </channel>
</rss>
